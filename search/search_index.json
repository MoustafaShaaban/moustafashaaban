{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"My personal website","text":""},{"location":"#my-personal-website","title":"My personal website","text":"<p>Here you can find my resume, projects and tutorials about GIS, Python, and Django web framework.</p> <ul> <li> <p>Resume</p> </li> <li> <p>GIS Resume</p> </li> <li> <p>Tutorials</p> </li> <li> <p>GIS Projects</p> </li> <li> <p>Django Projects</p> </li> <li> <p>Project Reviews</p> </li> </ul>"},{"location":"gis-resume/","title":"GIS Resume","text":""},{"location":"gis-resume/#gis-resume","title":"GIS Resume","text":""},{"location":"gis-resume/#moustafa-shaaban-abdelaziz","title":"Moustafa Shaaban Abdelaziz","text":"<ul> <li>Year of Birth: 1996</li> <li>Address: Alexandria, Egypt</li> </ul>"},{"location":"gis-resume/#contact","title":"Contact","text":"<ul> <li>Email: Moustafa-Shaaban@outlook.com       </li> <li>Phone + Whatsapp Number: 0201018989702</li> <li>Website</li> <li>LinkedIn</li> <li>Github</li> </ul>"},{"location":"gis-resume/#summary","title":"Summary","text":"<ul> <li> <p>Graduated from faculty of Arts department of Geography and Geographic Information Systems (GIS), Alexandria University.</p> </li> <li> <p>I had worked as a Customer service representative, Marine surveyor assistant and Data Entry.</p> </li> <li> <p>I am now looking for an opportunity in the field of GIS analysis or the field of data analysis, as I am trying to link what I studied and implemented in the college with the field of data analysis, where there is a great relationship between the two fields, and I also use some web development techniques to do some data visualization and analysis projects about spatial and non-spatial data.</p> </li> </ul>"},{"location":"gis-resume/#experience","title":"Experience","text":""},{"location":"gis-resume/#data-entry","title":"Data Entry","text":"<ul> <li>Elsadek for Real estate valuation</li> </ul>"},{"location":"gis-resume/#marine-surveyor-assistant","title":"Marine surveyor assistant","text":"<ul> <li>Misr Marine for Surveys and Services</li> </ul>"},{"location":"gis-resume/#customer-service-representative","title":"Customer Service Representative","text":"<ul> <li>ECCO Outsourcing</li> </ul>"},{"location":"gis-resume/#education","title":"Education","text":""},{"location":"gis-resume/#alexandria-university","title":"Alexandria University:","text":"<ul> <li>Bachelor's degree, from Faculty of Arts, Department of Geography and Geographic Information Systems, Division of Survey and Maps. (2014 - 2018)</li> </ul>"},{"location":"gis-resume/#projects","title":"Projects","text":""},{"location":"gis-resume/#project-1-basic-routing-and-directions-using-arcgis-javascript-api","title":"Project 1: Basic Routing and Directions using ArcGIS JavaScript API:","text":"<ul> <li> <p>Technologies Used: HTML5/ CSS3/ JavaScript/ ArcGIS JavaScript API</p> </li> <li> <p>In this project we will use the ArcGIS JavaScript API to calculate the directions between two or more locations, how to searh for a place using Geocoding and how to get the user geolocation.</p> </li> <li> <p>Project files on Github</p> </li> <li> <p>Preview</p> </li> </ul>"},{"location":"gis-resume/#project-2-searching-for-nearest-places-using-arcgis-javascript-api","title":"Project 2: Searching for nearest places using ArcGIS JavaScript API:","text":"<ul> <li> <p>Technologies Used: HTML5/ CSS3/ JavaScript/ ArcGIS JavaScript API</p> </li> <li> <p>In this project we will use the ArcGIS JavaScript API to search for nearest places like Parks, Hospitals, Hotels, Libraries and others in any area.</p> </li> <li> <p>Project files on Github</p> </li> <li> <p>Preview</p> </li> </ul>"},{"location":"gis-resume/#project-3-interactive-web-map-showing-public-schools-in-seattle","title":"Project 3: Interactive web map showing public schools in Seattle:","text":"<ul> <li> <p>Technologies Used: Pandas / Folium</p> </li> <li> <p>In this project we will learn how to use pandas library to read csv files, create and use a subset of our data and how to clean the data (finding any missing data and droping them).</p> </li> <li> <p>Project files on Github</p> </li> <li> <p>Preview</p> </li> </ul>"},{"location":"gis-resume/#project-4-static-and-interactive-web-maps-visualizing-public-services-and-facilites-in-washington-dc","title":"Project 4: Static and Interactive web maps visualizing public services and facilites in Washington D.C:","text":"<ul> <li> <p>Technologies Used: Pandas / Folium / QGIS / GeoJSON</p> </li> <li> <p>This project shows a static map of Washington D.C created in  QGIS an open source GIS software as well as an interactive web map showing public services and facilities in Washington D.C</p> </li> <li> <p>Project files on Github</p> </li> <li> <p>Static map</p> </li> <li> <p>Interactive web map Preview</p> </li> </ul>"},{"location":"gis-resume/#project-4-network-analysis-tutorials-using-qgis-and-spatial-databases","title":"Project 4: Network Analysis Tutorials using QGIS and Spatial Databases:","text":"<ul> <li> <p>Point to Point Analysis (Shortest path)</p> </li> <li> <p>Point to Point Analysis (Fastest path)</p> </li> <li> <p>Service Area Analysis (From Layer)</p> </li> <li> <p>Create a Spatialite database and insert data inside it</p> </li> <li> <p>Install PostgreSQL and PostGIS on Windows OS</p> </li> <li> <p>Create, manage and query a PostGIS spatial database</p> </li> </ul>"},{"location":"gis-resume/#skills","title":"Skills","text":""},{"location":"gis-resume/#languages","title":"Languages:","text":"<ul> <li>Arabic: Native Speaker</li> <li>English: Advanced</li> </ul>"},{"location":"gis-resume/#computer-skills","title":"Computer Skills:","text":"<ul> <li>Linux, Windows, Microsoft Office Suite, Git and Github.</li> </ul>"},{"location":"gis-resume/#gis","title":"GIS:","text":"<ul> <li>Autocad</li> <li>Civil 3D</li> <li>ArcGIS</li> <li>ArcGIS JavaScript API</li> <li>Quantum GIS (QGIS)</li> <li>Remote Sensing</li> <li>Geopandas</li> <li>Folium</li> </ul>"},{"location":"gis-resume/#databases","title":"Databases:","text":"<ul> <li>SQL</li> <li>MySQL, PostgreSQL and PostGIS</li> <li>Sqlite3 and Spatiallite</li> </ul>"},{"location":"gis-resume/#data-analysis-and-visualization","title":"Data Analysis and visualization:","text":"<ul> <li>Python</li> <li>Jupyterlab</li> <li>Pandas</li> <li>Numpy</li> <li>Matplotlib</li> <li>Microsoft PowerBI</li> </ul>"},{"location":"gis-resume/#data-collection-tools","title":"Data Collection Tools:","text":"<ul> <li>Kobo Toolbox</li> <li>Kobo Toolbox API</li> </ul>"},{"location":"resume/","title":"Resume","text":""},{"location":"resume/#moustafa-shaaban-abdelaziz","title":"Moustafa Shaaban Abdelaziz","text":"<ul> <li>Year of Birth: 1996</li> <li>Address: Alexandria, Egypt</li> </ul>"},{"location":"resume/#contact","title":"Contact","text":"<ul> <li>Email: Moustafa-Shaaban@outlook.com       </li> <li>Phone + Whatsapp Number: 0201018989702</li> <li>Website</li> <li>LinkedIn</li> <li>Github</li> </ul>"},{"location":"resume/#summary","title":"Summary","text":"<ul> <li> <p>Graduated from faculty of Arts department of Geography and Geographic Information Systems (GIS), Alexandria University.</p> </li> <li> <p>I am a Junior Software Developer with GIS background with experience in building Web applications I am seeking to apply and expand my knowledge and skills towards working in a collaborative environment to develop quality software solutions that address and solve business problems.</p> </li> </ul> <p>Skills :  Python, JavaScript, HTML/CSS, SQL, PostgreSQL, Vue JS, Git/GitHub, Bootstrap, Django web framework, NodeJS</p>"},{"location":"resume/#experience","title":"Experience","text":""},{"location":"resume/#data-entry","title":"Data Entry","text":"<ul> <li>Elsadek for Real estate valuation</li> </ul>"},{"location":"resume/#marine-surveyor-assistant","title":"Marine surveyor assistant","text":"<ul> <li>Misr Marine for Surveys and Services</li> </ul>"},{"location":"resume/#customer-service-representative","title":"Customer Service Representative","text":"<ul> <li>ECCO Outsourcing</li> </ul>"},{"location":"resume/#education","title":"Education","text":""},{"location":"resume/#alexandria-university","title":"Alexandria University:","text":"<ul> <li>Bachelor's degree, from Faculty of Arts, Department of Geography and Geographic Information Systems, Division of Survey and Maps.</li> </ul>"},{"location":"resume/#projects","title":"Projects","text":""},{"location":"resume/#advanced-django-blog","title":"Advanced Django Blog","text":"<p>A blog project built using </p> <p>Django Web Framework,    Django REST Framework,    Graphene Django,    Cookiecutter Django,   HTMX,   Vue.js 3,   Quasar Framework,   Tanstack Vue Query,   Vue Apollo,   Vue-multiselect,</p> <p>Full Review</p>"},{"location":"resume/#project-goals","title":"Project Goals","text":"<ul> <li> <p>Authenticated users can:</p> </li> <li> <p>Access a GraphQL endpoint and run several Quries and CRUD Mutations.</p> </li> <li> <p>Access a Rest API endpoint and run CRUD operations.</p> </li> <li> <p>Create, Read, Update and Delete (CRUD) blog posts on the website.</p> </li> <li> <p>Add comments on blog posts, but the comments will not be visiable until the website admin approves it.</p> </li> <li> <p>Like Blog posts and Add them to their favorite list (using HTMX).</p> </li> <li> <p>Access their profile which lists all their blog posts and their favorite posts.</p> </li> <li> <p>All users can read or search for the posts on the blog.</p> </li> <li> <p>Users can access separate frontend project built using Vue.js 3, Tanstack-Vue-Query, Vue-Apollo and Quasar Framework which connects with django through Django Rest Framework using Session Authentication.</p> </li> <li> <p>The frontend vue.js app also allows users to perform CRUD operations through connecting to a REST API and a GraphQL endpoints.</p> </li> </ul> <p>Currently in Vue frontend users can:</p> <ul> <li> <p>Register for an account and log in to their account (users will be authenticated using Django Rest Framework Session Authentication).</p> </li> <li> <p>Add tags to blog using a Rest API endpoint and GraphQL endpoint.</p> </li> <li> <p>Perform CRUD operations to blog posts using both REST API and GraphQL.</p> </li> <li> <p>Perform CRUD operations to add comments to blog posts using both REST API and GraphQL.</p> </li> <li> <p>Add and remove posts to and form their favorite posts list.</p> </li> <li> <p>Access pages that show their added blog posts and their favorite posts.</p> </li> <li> <p>Search for blog posts by title and limiting the results using both REST API and GraphQL</p> </li> <li> <p>All users can read or search for the posts on the blog.</p> </li> </ul>"},{"location":"resume/#project-files","title":"Project files","text":"<ul> <li>Github</li> </ul>"},{"location":"resume/#project-preview","title":"Project preview","text":"<ul> <li>Youtube</li> </ul>"},{"location":"resume/#project-description","title":"Project Description:","text":"<p>This project is a Django project called <code>backend</code> and it has two registered apps and one third-party app.</p> <ul> <li> <p>The <code>blog</code> app which contians an app-level templates and urls, used for most of the functionalities of our app, like, models, forms, views, urls, and custom template tags.</p> </li> <li> <p>The <code>users</code> app which uses <code>django.contrib.auth.urls</code> to allow users register and login to thier accounts.</p> </li> <li> <p><code>crispy forms</code> third-party app which makes beautify django forms design.</p> </li> </ul>"},{"location":"resume/#what-could-you-learn-from-this-project","title":"What could you learn from this project?","text":"<ul> <li> <p>Create Django models and define relationships between the database fields.</p> </li> <li> <p>Use both Django Class-based and Function-based views.</p> </li> <li> <p>Create custom Django template tags, (In this project I created a simple custom template tag that return the number of comments on each blog post).</p> </li> <li> <p>How to use page pagination on your website.</p> </li> <li> <p>How to associate each blog post to its author.</p> </li> <li> <p>How to protect your post so that only you who can modify or delete it.</p> </li> <li> <p>Throw a 403 forbidden page to any user who try to guss the URL to change something they are not authorized to do.</p> </li> <li> <p>Create a search form on your website.</p> </li> <li> <p>And many more.</p> </li> </ul>"},{"location":"resume/#django-geoapp-vuejs-3","title":"Django Geoapp + Vue.js 3","text":""},{"location":"resume/#project-goals_1","title":"Project Goals","text":"<ul> <li> <p>Use Django admin site to import data from different sources (CSV, JSON, ...) into the database.</p> </li> <li> <p>Use the power of Folium to visualize data generated from Django Database on a Leaflet JS map.</p> </li> <li> <p>Visualize data using Folium's Simple Markers.</p> </li> <li> <p>Users can register for an account, login, and update their information (handled by Cookiecutter Django)</p> </li> <li> <p>Authenticated users can add, import, or export data using django forms.</p> </li> <li> <p>Use Vue.js 3 (using Vite ) and axios to fetch the data from the backend and display it in a Bootstrap Table.</p> </li> </ul>"},{"location":"resume/#project-files_1","title":"Project Files","text":"<ul> <li>Github</li> </ul>"},{"location":"resume/#project-preview_1","title":"Project Preview","text":"<ul> <li>Youtube</li> </ul>"},{"location":"resume/#libraries-and-packages-used","title":"Libraries and Packages used","text":"<ul> <li> <p>Django Web Framework</p> </li> <li> <p>django-import-export package</p> </li> <li> <p>Folium</p> </li> <li> <p>Cookiecutter Django</p> </li> </ul>"},{"location":"resume/#django-todo-app","title":"Django Todo App","text":"<p>A project built with Django web framework and Bootstrap</p>"},{"location":"resume/#project-goals_2","title":"Project Goals","text":"<ul> <li> <p>Users can register to our website to create todos.</p> </li> <li> <p>Users can Create, Read, Update and Delete the todos form the website.</p> </li> <li> <p>Once logged in, Users can access a REST API of the our website, which also allows them to use CRUD (Create, Read, Update and Delete) operations.</p> </li> </ul>"},{"location":"resume/#project-functionalities","title":"Project Functionalities:","text":"<ul> <li> <p>Only logged in users can add todos from the website or the API.</p> </li> <li> <p>The list todo page of the website and the API will show only the todos which the logged in user created. Meaning, Only the author of the todo who can perform CRUD operations.</p> </li> <li> <p>If one user tried to test URLs to reach another user's todo a 403 Forbidden page is displayed.</p> </li> <li> <p>Once logged in Users can access a REST API which has a filtering framework built with django-filter package, which allows the user to filter the todos by their state (completed or not completed).</p> </li> </ul>"},{"location":"resume/#project-files_2","title":"Project Files","text":"<ul> <li>Github</li> </ul>"},{"location":"resume/#project-preview_2","title":"Project Preview","text":"<ul> <li>Youtube</li> </ul>"},{"location":"resume/#libraries-and-packages-used_1","title":"Libraries and Packages used","text":"<ul> <li> <p>Django Web Framework</p> </li> <li> <p>Django Rest Framework package</p> </li> <li> <p>django-filter</p> </li> <li> <p>UI components from the official Bootstrap 4.6 website documentation.</p> </li> </ul>"},{"location":"resume/#django-and-folium","title":"Django and folium","text":""},{"location":"resume/#project-goals_3","title":"Project Goals","text":"<ul> <li> <p>Use the power of Folium package to visualize data generated from Django Database on a Leaflet JS map.</p> </li> <li> <p>Use Django Admin Site to Import and Export data into and from the database.</p> </li> <li> <p>Visualize data using Folium's Simple Markers and Marker Cluster.</p> </li> </ul>"},{"location":"resume/#project-files_3","title":"Project Files","text":"<ul> <li>Github</li> </ul>"},{"location":"resume/#project-preview_3","title":"Project Preview","text":"<ul> <li> <p>Version 1 on Youtube</p> </li> <li> <p>Version 2 on Youtube</p> </li> <li> <p>Version 3 on Youtube</p> </li> </ul>"},{"location":"resume/#libraries-and-packages-used_2","title":"Libraries and Packages used","text":"<ul> <li> <p>Django Web Framework</p> </li> <li> <p>django-import-export package</p> </li> <li> <p>Folium</p> </li> </ul>"},{"location":"resume/#skills","title":"Skills","text":""},{"location":"resume/#languages","title":"Languages:","text":"<ul> <li>Arabic: Native Speaker</li> <li>English: Advanced</li> </ul>"},{"location":"resume/#computer-skills","title":"Computer Skills:","text":"<ul> <li>Linux, Windows, Microsoft Office Suite, Git and Github.</li> </ul>"},{"location":"resume/#databases","title":"Databases:","text":"<ul> <li>SQL</li> <li>PostgreSQL and PostGIS</li> <li>Sqlite3 and Spatiallite</li> </ul>"},{"location":"resume/#web-development","title":"Web Development:","text":"<ul> <li>HTML5</li> <li>CSS3</li> <li>JavaScript</li> <li>Backend development</li> <li>Django web framework</li> <li>Django rest framework</li> <li>Rest APIs</li> <li>GraphQL (Graphene Python)</li> <li>Vue JS</li> <li>Bootstrap 5</li> <li>Vite build tool</li> <li>Axios</li> <li>Apollo GraphQL Client</li> </ul>"},{"location":"project-reviews/project-reviews/","title":"Project Reviews","text":"<p>In this section of the website you can find review articles about some of the projects I created.</p>"},{"location":"project-reviews/project-reviews/#django-projects","title":"Django Projects:","text":"<ul> <li>Advanced Django Blog with Rest API and GraphQL.</li> </ul>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/","title":"Django Blog","text":""},{"location":"project-reviews/django/Django-Blog/Django-Blog/#advanced-django-blog-with-rest-api-and-graphql","title":"Advanced Django Blog with Rest API and GraphQL","text":""},{"location":"project-reviews/django/Django-Blog/Django-Blog/#main-project-files-on-github","title":"Main Project Files on Github","text":"<p>In this article I will review a project I created using the following frameworks:</p> <ul> <li>Django Web Framework.</li> <li>Django REST Framework.</li> <li>Graphene Django.</li> <li>Cookiecutter Django.</li> </ul> <ol> <li>Project Description.</li> <li>User Story.</li> <li>Get started with the project</li> <li>Main Project Review.</li> <li>GraphQL Review.</li> <li>REST API Review.</li> </ol>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#project-description","title":"Project Description:","text":"<p>This project is called <code>blog_backend</code> and it has four registered apps and one third-party app.</p> <ul> <li> <p>The <code>blog</code> app which contains an app-level templates and urls, used for most of the functionalities of our project, like, blog models, forms, views, urls, and custom template tags.</p> </li> <li> <p>The <code>api</code> app which contains the Django Rest Framework integration used to build a REST API.</p> </li> <li> <p>The <code>graphql_app</code> which contains the Graphene Django integration used to build a GraphQL endpoint.</p> </li> <li> <p>The <code>users</code> app which uses <code>django.contrib.auth.urls</code> to allow users to register and login to their accounts.</p> </li> <li> <p><code>crispy forms</code> third-party app which beautify django forms UI design using Bootstrap.</p> </li> </ul>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#user-story","title":"User Story","text":"<p>Users can register for a new account and login, once logged in users can confirm their email address (currently using Mail hog which is handled by Cookiecutter Django).</p> <p>Once authenticated, users can do the following:</p> <ul> <li> <p>Update their name or email address inside their profile page.</p> </li> <li> <p>Create, Read, Update and Delete (CRUD) blog posts on the website.</p> </li> <li> <p>Search for the blog posts.</p> </li> <li> <p>Mark posts as their favorite posts and access them in their profile dropdown menu .</p> </li> <li> <p>Access their profile which lists all their added blog posts and their favorite posts.</p> </li> <li> <p>Add comments on blog posts, but the comments will not be visible until the website admin approves it.</p> </li> <li> <p>Access a GraphQL endpoint and run several Queries and CRUD Mutations.</p> </li> <li> <p>Access a Rest API endpoint and run CRUD operations.</p> </li> </ul>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#to-get-started-with-this-project","title":"To get started with this project","text":"<ul> <li> <p>Make sure that Docker and docker-compose are installed in your system.</p> </li> <li> <p>Clone the repository: git clone https://github.com/MoustafaShaaban/Advanced_Django_Blog.git</p> </li> <li> <p>Change directory to blog_backend directory <code>cd blog_backend</code></p> </li> <li> <p>Build the docker image to develop the project locally using docker-compose:</p> </li> </ul> <p><code>docker-compose -f local.yml build</code></p> <ul> <li>Create the database by running the following commands:</li> </ul> <p><code>docker-compose -f local.yml run --rm django python manage.py makemigrations</code></p> <p><code>docker-compose -f local.yml run --rm django python manage.py migrate</code></p> <ul> <li>Create a super user:</li> </ul> <p><code>docker-compose -f local.yml run --rm django python manage.py createsuperuser</code></p> <ul> <li>Now run the project:</li> </ul> <p><code>docker-compose -f local.yml up</code></p> <ul> <li>Open the web browser and go to <code>http://localhost:8000/</code> to see the results.</li> </ul> <p></p> <p>Now, we can start reviewing our project.</p>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#main-project-review","title":"Main Project Review","text":"<ul> <li>Adding a new blog post:</li> </ul> <ul> <li>Updating a blog post:</li> </ul> <ul> <li>Delete a blog post:</li> </ul> <ul> <li>Protect blog posts so that only the author of the post who can modify it:</li> </ul> <ul> <li>Add blog posts to favorite posts:</li> </ul> <ul> <li>List all tags and its related posts: </li> </ul> <ul> <li>Search for blog posts:</li> </ul>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#graphql-review","title":"GraphQL Review","text":"<p>Currently, the project has the following GraphQL Queries and Mutations:</p>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#alltags","title":"allTags","text":"<p>Lists all the available tags in the website:</p> <pre><code>\nquery ReturnAllTags {\n  allTags {\n    id\n    name\n    slug\n  }\n}\n\n</code></pre> <p></p>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#createtag","title":"createTag","text":"<p>This mutation will do the following: </p> <ol> <li> <p>Create a tag called Python, it takes only one input &gt;&gt; the tag name, then, Django will use slugify to create a slug for the tag before saving it to the database.</p> </li> <li> <p>Return all the information about this tag (id, name, and slug):</p> </li> </ol> <pre><code>\nmutation CreateTag {\n  createTag(input: {name: \"Python\"}) {\n    tag {\n      id\n      name\n      slug\n    }\n  }\n\n</code></pre> <p></p>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#updatetag","title":"updateTag","text":"<p>This mutation will do the following: </p> <ol> <li> <p>Update the tag we need by its slug. so we first need to get the slug of the tag we need to update, then pass in the new name we want to.</p> </li> <li> <p>Return all the information about this tag (id, name, and slug):</p> </li> </ol> <pre><code>\nmutation UpdateTag {\n  updateTag(slug: \"python\", name: \"python\") {\n    tag {\n      id\n      name\n      slug\n    }\n  }\n}\n\n</code></pre> <p></p>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#deletetag","title":"deleteTag","text":"<p>This mutation will do the following: </p> <ol> <li> <p>Select the tag by its id then, deletes it.</p> </li> <li> <p>Return a success Boolean, if its True, then the tag is deleted successfully:</p> </li> </ol> <pre><code>\nmutation DeleteTag {\n  deleteTag(id: 2) {\n    success\n  }\n}\n\n</code></pre> <p></p>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#createpost","title":"createPost","text":"<p>This mutation will do the following: </p> <ol> <li> <p>Create a new blog post, it takes the following inputs =&gt; title, content and tags.</p> </li> <li> <p>Return an instance of the post and some of its information like post id, title, slug, author, tag, content and comments:</p> </li> </ol> <pre><code>\nmutation createPost {\n  createPost(input: {\n    title: \"Post 1\",\n    content: \"Post 1 content\",\n    tags: [\n        { slug: \"python\" },\n    ]\n  }) {\n    post {\n        id\n        title\n        slug\n        author {\n            username\n        }\n        tag {\n            name\n            slug\n        }\n        content\n        comments {\n            comment\n            user {\n                username\n            }\n        }\n    }\n  }\n}\n\n</code></pre> <p></p>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#updatepost","title":"updatePost","text":"<p>This mutation is protected, meaning that, only the post author who can update it, If another user tried to update the post, a GraphQL Error will be raised. and it does the following: </p> <ol> <li> <p>Update a blog post, it selects the post by its id, then takes the following inputs =&gt; title, content and tags.</p> </li> <li> <p>Return an instance of the post and some of its information like post id, title, slug, author, tag, content and comments:</p> </li> </ol> <pre><code>\nmutation updatePost {\n  updatePost(\n    id: 1\n    input: {title: \"Post 1 updated\", content: \"Post 1 content updated\", tags: [{slug: \"python\"}, {slug: \"django\"}]}\n  ) {\n    post {\n      title\n      tag {\n        name\n        slug\n      }\n      content\n    }\n  }\n}\n\n</code></pre> <p></p>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#deletepost","title":"deletePost","text":"<p>This mutation is protected, meaning that, only the post author who can delete it, If another user tried to delete the post, a GraphQL Error will be raised. and it does the following: </p> <ol> <li> <p>Select the post by its id, then deletes it.</p> </li> <li> <p>Return a success Boolean, if its True, then the post is deleted successfully:</p> </li> </ol> <pre><code>\nmutation deletePost {\n  deletePost(id: 1) {\n    success\n  }\n}\n\n</code></pre> <p></p>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#createcomment","title":"createComment","text":"<p>This mutation will do the following: </p> <ol> <li> <p>Adds a new comment to a blog post, it takes the following inputs =&gt; postSlug, email and comment.</p> </li> <li> <p>Return an instance of comment and some of its information like comment id, user, email, comment and the post title which has this comment:</p> </li> </ol> <pre><code>\nmutation createComment {\n  createComment(\n    inputs: {postSlug: \"post-1\", email: \"admin@admin.com\", comment: \"Great post\"}\n  ) {\n    comment {\n      id\n      user {\n        username\n      }\n      email\n      comment\n      post {\n        title\n      }\n    }\n  }\n}\n\n</code></pre> <p></p>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#updatecomment","title":"updateComment","text":"<p>This mutation is protected, meaning that, only the user who added this comment can update it, If another user tried to update the comment, a GraphQL Error will be raised. and it does the following: </p> <ol> <li> <p>Update a comment, it selects the comment by its id, then takes the following inputs =&gt; comment.</p> </li> <li> <p>Return an instance of the comment and some of its information like comment id and comment:</p> </li> </ol> <pre><code>\nmutation updateComment {\n  updateComment(id: 1, comment: \"Great post keep it up\") {\n    success\n    comment {\n        id\n        comment\n    }\n  }\n}\n\n</code></pre> <p></p>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#deletecomment","title":"deleteComment","text":"<p>This mutation is protected, meaning that, only the user who added this comment can delete it, If another user tried to update the comment, a GraphQL Error will be raised. and it does the following: </p> <ol> <li> <p>Select the comment by its id, then deletes it.</p> </li> <li> <p>Return a success Boolean, if its True, then the comment is deleted successfully:</p> </li> </ol> <pre><code>\nmutation deleteComment {\n  deleteComment(id: 2) {\n    success\n  }\n}\n\n</code></pre> <p></p>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#allposts","title":"allPosts","text":"<p>This Query returns all the blog posts:</p> <pre><code>\nquery AllPosts {\n    allPosts {\n        id\n        title\n        author {\n            username\n        }\n        tag {\n            name\n        }\n        content\n        comments {\n            comment\n            user {\n                username\n            }\n        }\n    }\n}\n\n</code></pre> <p></p>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#allpostswithfilters","title":"allPostsWithFilters","text":"<p>This is a GraphQL Relay Mutation which uses Django-Filter package to filter the posts. Here, we return the posts which its title contains the number 1:</p> <pre><code>\nquery AllPostsWithFilters {\n    allPostsWithFilters(title_Icontains: \"1\") {\n        edges {\n            node {\n                id\n                title\n                author {\n                    username\n                }\n            }\n        }\n    }\n}\n\n</code></pre> <p>We can also filter the blog posts by content, and display specific number of posts. (Check the GraphQL Docs at the following project url: http://127.0.0.1:8000/graphql/  )</p> <p></p>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#postsbytag","title":"postsByTag","text":"<p>This Query return all the posts which has the provided tag.</p> <pre><code>\nquery PostsByTag {\n    postsByTag(tag: \"python\") {\n        id\n        title\n        author {\n            username\n        }\n        tag {\n            name\n        }\n        content\n        comments {\n            comment\n            user {\n                username\n            }\n        }\n    }\n}\n\n</code></pre> <p></p>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#postsbytauthor","title":"postsByTAuthor","text":"<p>This Query return all the posts which has the provided author username.</p> <pre><code>\nquery PostsByAuthor {\n    postsByAuthor(author: \"admin\") {\n        id\n        title\n        author {\n            username\n        }\n        tag {\n            name\n        }\n        content\n        comments {\n            comment\n            user {\n                username\n            }\n        }\n    }\n}\n\n</code></pre> <p></p>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#postbytitle","title":"postByTitle","text":"<p>This Query returns all the posts filtered by its title (This is not a GraphQL Relay Query like the one above)</p> <pre><code>query PostsByTitle {\n    postByTitle(title: \"Post\") {\n        id\n        title\n        author {\n            username\n        }\n        tag {\n            name\n        }\n        content\n        comments {\n            user {\n                username\n            }\n            comment\n        }\n    }\n}\n\n</code></pre> <p></p>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#commentsbypost","title":"commentsByPost","text":"<p>This Query return all the comments on a specific blog post.</p> <pre><code>\nquery CommentsByPost {\n    commentsByPost(postTitle: \"Post\") {\n        id\n        comment\n        email\n        user {\n            username\n        }\n        post {\n            title\n            author {\n                username\n            }\n        }\n    }\n}\n\n</code></pre> <p></p>"},{"location":"project-reviews/django/Django-Blog/Django-Blog/#rest-api-review","title":"REST API Review","text":"<p>The REST API has the same functionality as the main website, It uses Django REST Framework Viewsets and Routers to allow users to perform Create, Read, Update and Delete (CURD) operations.</p> <p>Also It uses Cookiecutter Django's REST API Documentation using Swagger API.</p> <p></p> <p>I changed the default way to retrieve the blog post detail information, Instead of having to provide the post id, you can uses the post slug:</p> <p></p>"},{"location":"projects/django-projects/","title":"Django Portfolio","text":""},{"location":"projects/django-projects/#django-portfolio","title":"Django Portfolio","text":"<p>This section of the website contains my Django projects.</p> <p>Currently it has some projects under the name of:</p> <ul> <li> <p>Advanced Django Blog</p> </li> <li> <p>Django Todo App with Authentication and Authorization with REST API</p> </li> <li> <p>Django and folium</p> </li> </ul>"},{"location":"projects/django-projects/#django-geoapp-vuejs-3","title":"Django Geoapp + Vue.js 3","text":"<p>Project Goals</p> <ul> <li> <p>Use Django admin site to import data from different sources (CSV, JSON, ...) into the database.</p> </li> <li> <p>Use the power of Folium to visualize data generated from Django Database on a Leaflet JS map.</p> </li> <li> <p>Visualize data using Folium's Simple Markers.</p> </li> <li> <p>Users can register for an account, login, and update their information (handled by Cookiecutter Django)</p> </li> <li> <p>Authenticated users can add, import, or export data using django forms.</p> </li> <li> <p>Use Vue.js 3 (using Vite ) and axios to fetch the data from the backend and display it in a Bootstrap Table.</p> </li> </ul> <p>Project Files</p> <ul> <li>Github</li> </ul> <p>Project Preview</p> <ul> <li>Youtube</li> </ul> <p>Libraries and Packages used</p> <ul> <li> <p>Django Web Framework</p> </li> <li> <p>django-import-export package</p> </li> <li> <p>Folium</p> </li> <li> <p>Cookiecutter Django</p> </li> </ul>"},{"location":"projects/django-projects/#advanced-django-blog","title":"Advanced Django Blog","text":"<p>A project built with Django web framework and Bootstrap.</p> <p>Project Goals</p> <ul> <li> <p>All users can read or search for the posts on the blog.</p> </li> <li> <p>Authenticated users can:</p> <ul> <li> <p>Access a GraphQL endpoint and Run several Queries and Mutations.</p> </li> <li> <p>Create, Read, Update and Delete (CRUD) blog posts on the website.</p> </li> <li> <p>Add comments on blog posts, but the comments will not be shown until the website admin approves it.</p> </li> <li> <p>Access their profile which lists all their added blog posts.</p> </li> </ul> </li> </ul> <p>Project files</p> <ul> <li>Github</li> </ul> <p>Project preview</p> <ul> <li>Youtube</li> </ul> <p>Project Description:</p> <p>This project is a Django project called <code>blog_backend</code> and it has four registered apps and one third-party app.</p> <ul> <li> <p>The <code>blog</code> app which contains an app-level templates and urls, used for most of the functionalities of our app, like, models, forms, views, urls, and custom template tags.</p> </li> <li> <p>The <code>api</code> app which contains the Django Rest Framework integration used to build a REST API.</p> </li> <li> <p>The <code>graphql_app</code> which contains the Graphene Django integration used to build a GraphQL endpoint.</p> </li> <li> <p>The <code>users</code> app which uses <code>django.contrib.auth.urls</code> to allow users register and login to their accounts.</p> </li> </ul> <p>What could you learn from this project?</p> <ul> <li> <p>Create Django models and define relationships between the database fields.</p> </li> <li> <p>Use both Django Class-based and Function-based views.</p> </li> <li> <p>Create custom Django template tags, (In this project I created a simple custom template tag that return the number of comments on each blog post).</p> </li> <li> <p>How to use page pagination on your website.</p> </li> <li> <p>How to associate each blog post to its author.</p> </li> <li> <p>How to protect your post so that only you who can modify or delete it.</p> </li> <li> <p>Throw a 403 forbidden page to any user who try to guess the URL to change something they are not authorized to do.</p> </li> <li> <p>Create a search form on your website.</p> </li> <li> <p>Use a REST API endpoint.</p> </li> <li> <p>Use Graphene Django to add a GraphQL endpoint and use to run several Queries and Mutations.</p> </li> </ul> <p>Libraries and Packages used:</p> <ul> <li> <p>Django Web Framework</p> </li> <li> <p>Django REST Framework</p> </li> <li> <p>Graphene Django</p> </li> <li> <p>Cookiecutter Django</p> </li> <li> <p>django-crispy-forms package</p> </li> <li> <p>UI components from the official Bootstrap 5.2 website documentation.</p> </li> </ul>"},{"location":"projects/django-projects/#django-todo-app","title":"Django Todo App","text":"<p>A project built with Django web framework and Bootstrap</p> <p>Project Goals</p> <ul> <li> <p>Users can register to our website to create todos.</p> </li> <li> <p>Users can Create, Read, Update and Delete the todos form the website.</p> </li> <li> <p>Once logged in, Users can access a REST API of the our website, which also allows them to use CRUD (Create, Read, Update and Delete) operations.</p> </li> </ul> <p>Project Functionalities:</p> <ul> <li> <p>Only logged in users can add todos from the website or the API.</p> </li> <li> <p>The list todo page of the website and the API will show only the todos which the logged in user created. Meaning, Only the author of the todo who can perform CRUD operations.</p> </li> <li> <p>If one user tried to test URLs to reach another user's todo a 403 Forbidden page is displayed.</p> </li> <li> <p>Once logged in Users can access a REST API which has a filtering framework built with django-filter package, which allows the user to filter the todos by their state (completed or not completed).</p> </li> </ul> <p>Project Files</p> <ul> <li>Github</li> </ul> <p>Project Preview</p> <ul> <li>Youtube</li> </ul> <p>Libraries and Packages used</p> <ul> <li> <p>Django Web Framework</p> </li> <li> <p>Django Rest Framework package</p> </li> <li> <p>django-filter</p> </li> <li> <p>UI components from the official Bootstrap 4.6 website documentation.</p> </li> </ul>"},{"location":"projects/django-projects/#django-and-folium","title":"Django and folium","text":"<p>Project Goals</p> <ul> <li> <p>Use the power of Folium package to visualize data generated from Django Database on a Leaflet JS map.</p> </li> <li> <p>Use Django Admin Site to Import and Export data into and from the database.</p> </li> <li> <p>Visualize data using Folium's Simple Markers and Marker Cluster.</p> </li> </ul> <p>Project Files</p> <ul> <li>Github</li> </ul> <p>Project Preview</p> <ul> <li> <p>Version 1 on Youtube</p> </li> <li> <p>Version 2 on Youtube</p> </li> </ul> <p>Libraries and Packages used</p> <ul> <li> <p>Django Web Framework</p> </li> <li> <p>django-import-export package</p> </li> <li> <p>Folium</p> </li> </ul>"},{"location":"projects/gis-projects/","title":"GIS Portfolio","text":""},{"location":"projects/gis-projects/#gis-portfolio","title":"GIS Portfolio","text":"<p>This section of the website contians my GIS projects.</p> <p>Currently it has some projects under the name of:</p> <ul> <li> <p>USA_Maps_and_Analysis</p> </li> <li> <p>Web_GIS</p> </li> </ul>"},{"location":"projects/gis-projects/#project-1-is-an-interactive-web-map-visualizing-the-public-schools-in-seattle","title":"Project 1 is an interactive web map visualizing the Public Schools in Seattle","text":"<ul> <li>There are two versions of this project:</li> <li>1- Using the Python programming language.   (Folium)</li> <li>2- Using the JavaScript programming language.   (ArcGIS JavaScript API)</li> </ul> <p>Seattle Public Schools with Folium</p> <p>Seattle Public Schools with ArcGIS JavaScript API</p> <ul> <li>In this project I used a Python package called Folium and the ArcGIS JavaScript API</li> </ul>"},{"location":"projects/gis-projects/#project-2-contains-interactive-and-static-maps-of-the-usa","title":"Project 2 contains interactive and static maps of the USA","text":"<ul> <li>The interactive map shows a choropleth map of the population count in the USA by each state, and also shows some population studies like the population growth from 2010 to 2021.</li> <li>This project was created by another python library called Geopandas</li> </ul> <p>USA Population Study Interactive web map</p> <ul> <li>The static maps also shows some populations study like population count and population density, These maps were created by a free open source GIS software called QGIS</li> </ul> <p>Static Population Maps</p>"},{"location":"projects/gis-projects/#project-3-contian-an-interactive-web-map-that-display-some-data-in-washington_dc-like-hospitals-libraries-post-offices","title":"Project 3 contian an interactive web map that display some data in Washington_DC like Hospitals, Libraries, Post offices, ...","text":"<ul> <li>This project is also create using Folium</li> </ul> <p>Washington_DC</p>"},{"location":"projects/gis-projects/#project-4-contains-an-interactive-web-map-built-with-arcgis-javascript-api","title":"Project 4 contains an interactive web map built with ArcGIS JavaScript API","text":"<ul> <li> <p>This project contains two mini sub project:</p> <p>Basic Routing</p> <ul> <li>In this project we can find the shortest path between two or more locations.</li> </ul> <p>Searching for Nearby Places</p> <ul> <li>In this project we can search for nearby places like hospitals, hotels, parks ...</li> </ul> </li> </ul>"},{"location":"projects/vuejs-projects/","title":"Vue JS Portfolio","text":""},{"location":"projects/vuejs-projects/#vue-js-portfolio","title":"Vue JS Portfolio","text":"<p>This section contains my Vue JS projects.</p> <p>Currently it has some projects:</p> <ul> <li> <p>Vue GIS App</p> </li> <li> <p>Vue Notes App</p> </li> </ul>"},{"location":"projects/vuejs-projects/#vue-gis","title":"Vue GIS","text":""},{"location":"projects/vuejs-projects/#project-goals","title":"Project Goals","text":"<ul> <li> <p>Create, Read, Update and Delete (CRUD) geo features.</p> </li> <li> <p>Persist features data using the localStorage API.</p> </li> <li> <p>Search for features by feature title or description.</p> </li> </ul>"},{"location":"projects/vuejs-projects/#live-preview","title":"Live Preview","text":"<p>Vue Notes App</p>"},{"location":"projects/vuejs-projects/#project-review","title":"Project Review","text":"<ul> <li>Project Review:</li> </ul> <ul> <li>Adding Data:</li> </ul> <ul> <li>Filtering Data:</li> </ul> <ul> <li>Sort and Update Data:</li> </ul> <ul> <li>Delete Data and Search for new places:</li> </ul>"},{"location":"projects/vuejs-projects/#get-started-with-this-project","title":"Get started with this project","text":"<ul> <li> <p>Clone the repository: git clone https://github.com/MoustafaShaaban/Vue-GIS.git</p> </li> <li> <p>Change directory to Vue-GIS directory <code>cd Vue-GIS</code></p> </li> <li> <p>Install the packages <code>npm install</code></p> </li> <li> <p>Run the development server <code>quasar dev</code></p> </li> </ul>"},{"location":"projects/vuejs-projects/#libraries-and-packages-used","title":"Libraries and Packages used","text":"<ul> <li> <p>Vue.js 3</p> </li> <li> <p>Quasar Framework</p> </li> <li> <p>Pinia</p> </li> <li> <p>VueUse</p> </li> <li> <p>Leaflet JS</p> </li> </ul>"},{"location":"projects/vuejs-projects/#vue-notes-app","title":"Vue Notes App","text":""},{"location":"projects/vuejs-projects/#project-goals_1","title":"Project Goals","text":"<ul> <li> <p>Create, Read, Update and Delete (CRUD) notes.</p> </li> <li> <p>Create, Read, Update and Delete (CRUD) note tags.</p> </li> <li> <p>Link notes by tags.</p> </li> <li> <p>Persist Notes and Tags using the localStorage API.</p> </li> <li> <p>Search for notes by note title or content.</p> </li> </ul>"},{"location":"projects/vuejs-projects/#live-preview_1","title":"Live Preview","text":"<p>Vue Notes App</p>"},{"location":"projects/vuejs-projects/#get-started-with-this-project_1","title":"Get started with this project","text":"<ul> <li> <p>Clone the repository: git clone https://github.com/MoustafaShaaban/Vue_Notes_App.git</p> </li> <li> <p>Change directory to Vue_Notes_App directory <code>cd Vue_Notes_App</code></p> </li> <li> <p>Install the packages <code>npm install</code></p> </li> <li> <p>Run the development server <code>npm run dev</code></p> </li> <li> <p>Open the web browser and go to <code>http://localhost:5173/</code> to see the results.</p> </li> </ul>"},{"location":"projects/vuejs-projects/#libraries-and-packages-used_1","title":"Libraries and Packages used","text":"<ul> <li> <p>Vue.js 3</p> </li> <li> <p>Quasar Framework</p> </li> <li> <p>Pinia</p> </li> <li> <p>VueUse</p> </li> <li> <p>Vue-multiselect</p> </li> </ul>"},{"location":"tutorials/tutorials/","title":"Tutorials","text":""},{"location":"tutorials/tutorials/#available-tutorials","title":"Available tutorials","text":""},{"location":"tutorials/tutorials/#general","title":"General","text":"<ul> <li> <p>Installing Python</p> </li> <li> <p>Installing Anaconda Distrbution</p> </li> <li> <p>Creating Anaconda Environment and Installing ArcGIS Python API</p> </li> <li> <p>Installing Microsoft VS Code and some recommended Extensions</p> </li> </ul>"},{"location":"tutorials/tutorials/#django","title":"Django","text":"<ul> <li> <p>Create a Django project</p> </li> <li> <p>Using Django with Folium</p> </li> </ul>"},{"location":"tutorials/tutorials/#gis","title":"GIS","text":""},{"location":"tutorials/tutorials/#network-analysis","title":"Network Analysis","text":""},{"location":"tutorials/tutorials/#qgis3","title":"QGIS3","text":"<ul> <li> <p>Point to Point Analysis (Shortest path)</p> </li> <li> <p>Point to Point Analysis (Fastest path)</p> </li> <li> <p>Service Area Analysis (From Layer)</p> </li> </ul>"},{"location":"tutorials/tutorials/#spatial-databases","title":"Spatial Databases","text":"<ul> <li> <p>Create a Spatialite database and insert data inside it</p> </li> <li> <p>Install PostgreSQL and PostGIS on Windows OS</p> </li> <li> <p>Create, manage and query a PostGIS spatial database</p> </li> </ul>"},{"location":"tutorials/Django/django/","title":"Django","text":""},{"location":"tutorials/Django/django/#django","title":"Django","text":"<ul> <li> <p>Create a Django project</p> </li> <li> <p>Django-and-Folium</p> </li> </ul>"},{"location":"tutorials/Django/Create_Django_project/django_project/","title":"Create a Django project","text":""},{"location":"tutorials/Django/Create_Django_project/django_project/#create-a-django-project","title":"Create a Django project","text":"<p>In this tutorial we will learn how to create a new Django project, and how to render an HTML template in the website's home page.</p>"},{"location":"tutorials/Django/Create_Django_project/django_project/#steps","title":"Steps:","text":"<pre><code>* Make sure that Python and pip are installed\n* Create a virtual environment.\n* Start a Django project, create and register a new app\n* Create a Django view and template\n* Register the view in a URL configuration file\n* Run the Django server to view the results.\n</code></pre>"},{"location":"tutorials/Django/Create_Django_project/django_project/#make-sure-that-python-and-pip-are-installed","title":"Make sure that Python and pip are installed","text":"<p>To make sure that Python and pip are installed. Open your CMD or terminal and run the following commands:</p> <p><code>python --version</code></p> <p>This command should return something like the following image:</p> <p></p> <p>This means that Python version 3.10.8 is installed in my system, If you got an error saying that <code>'python' is not recognized as an internal or external command, operable program or batch file</code> this means that Python is not installed on your system, or, is not added to path.</p> <p>If you got this error you can read my tutorial about how to install and configure Python on windows, You can find it (here)[https://moustafashaaban.github.io/tutorials/General/1-Installing_Python/python/]</p> <p>Next, run this command to check if pip is installed</p> <p><code>pip --version</code></p> <p></p> <p>As you can see I have pip version 22.3.1 installed.</p>"},{"location":"tutorials/Django/Create_Django_project/django_project/#create-a-virtual-environment","title":"Create a virtual environment.","text":"<p>Now let's create a directory in our desktop called 'website' that will contain our project files.</p> <p><code>cd Desktop</code></p> <p><code>mkdir website</code></p> <p><code>cd website</code></p> <p>Create a Virtual Environment and activate it:</p> <p><code>python -m venv venv</code></p> <p><code>source venv/bin/activate</code></p> <p></p> <p>Now that our venv is activated let's install Django inside it:</p> <p><code>pip install django== 4.1.3</code></p>"},{"location":"tutorials/Django/Create_Django_project/django_project/#start-a-django-project-create-and-register-a-new-app","title":"Start a Django project, create and register a new app","text":"<p>Now that Django is installed we can start a new project and create a new app.</p> <p>In the terminal type the following command to create a project called backend:</p> <p><code>django-admin startproject backend</code></p> <p>A new directory called backend will be added to our project directory, change directory to it so we can use the commands that Django gives us which can be run by the manage.py file.</p> <p><code>cd backend</code></p> <p>Create an app called app by running the following command:</p> <p><code>python manage.py startapp app</code></p> <p></p> <p>After this, we need to tell Django to use our new app, This is done by adding it to the <code>INSTALLED_APPS</code> section in the settings.py in our project's directory:</p> <p></p> <p>In this tutorial we will use an app-level url configurations, so the last thing we need to do in this step is to create a <code>urls/py</code> file and map it in our main project <code>urls.py</code></p> <ul> <li>Edit <code>backend/urls.py</code> to match the image below:</li> </ul> <pre><code>from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('app.urls')),  # We will create this file in the next step\n]\n\n</code></pre> <p></p> <p>Create a new file called <code>urls.py</code> inside the app directory and type the following code inside it:</p> <p></p> <pre><code>from django.urls import path\n\nurlpatterns = [\n\n]\n</code></pre> <p></p> <p></p>"},{"location":"tutorials/Django/Create_Django_project/django_project/#create-a-django-view-and-template","title":"Create a Django view and template","text":"<p>According to Django docs, \"A view is a callable which takes a request and returns a response\". We can define views in Django as a Python Function (FBV) or as a Python Class (CBV), In this tutorial, I will use Fumction-Based views.</p> <p>We define our views in a file called views.py which is located in our app directory. so, open it and type the following:</p> <pre><code>from django.shortcuts import render\n\n\ndef home(request):\n    return render(request, 'home.html')\n</code></pre> <p></p> <p>This function takes a parameter <code>request</code> and renders an HTML file called `home.html</p> <p>Now let's create the app-level templates directory and add the <code>home.html</code> file inside it:</p> <p><code>mkdir app/templates</code></p> <p><code>touch app/templates/home.html</code></p> <p></p> <p>Inside the <code>home.html</code> file add the following code to return an h1 tag:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset='UTF-8'&gt;\n        &lt;title&gt;Hello Dlango&lt;/title&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;h1&gt;Welcome to my home page&lt;/h1&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p></p>"},{"location":"tutorials/Django/Create_Django_project/django_project/#register-the-view-in-a-url-configuration-file","title":"Register the view in a URL configuration file","text":"<p>Now that we have both the view and the template, all we need to do is map the view in our <code>urls.py</code> file </p> <pre><code>app/urls.py\n\nfrom django.urls import path\n\nfrom . import views\n\n\nurlpatterns = [\n    path('', views.home, name='home')\n]\n</code></pre> <p></p>"},{"location":"tutorials/Django/Create_Django_project/django_project/#run-the-django-server-to-view-the-results","title":"Run the Django server to view the results","text":"<p>Inside the terminal type the following command to run the development server:</p> <p><code>python manage.py runserver</code></p> <p></p> <p>Then open your web browser and navigate this URL: <code>localhost:8000/</code> You'll see the following page:</p> <p></p> <p>Now our new Django is running successfully.</p>"},{"location":"tutorials/Django/Django-and-Folium/Django-and-Folium/","title":"Using Django with Folium","text":"<p>In this tutorial we will learn how to visualize data from Django database into an interactive web map using Folium.</p> <p>You can find the source code of this tutorial on my Github account here</p>"},{"location":"tutorials/Django/Django-and-Folium/Django-and-Folium/#table-of-contents","title":"Table of contents","text":"<ol> <li> <p>Setting up the project</p> </li> <li> <p>Setting up the maps app</p> </li> </ol>"},{"location":"tutorials/Django/Django-and-Folium/Django-and-Folium/#libraries-and-packages-used","title":"Libraries and Packages used","text":"<ul> <li> <p>Django Web Framework</p> </li> <li> <p>django-crispy-forms</p> </li> <li> <p>Folium</p> </li> </ul> <p>According to Folium's Docs <code>folium</code> makes it easy to visualize data that's been manipulated in Python on an interactive leaflet map. It enables both the binding of data to a map for <code>choropleth</code> visualizations as well as passing rich vector/raster/HTML visualizations as markers on the map.</p> <p>Let's get started.</p>"},{"location":"tutorials/Django/Django-and-Folium/Django-and-Folium/#project-setup","title":"Project Setup","text":"<p>Create Django project (If you haven't used Django before you can check this tutorial to learn how to create a Django project) called backend.</p> <pre><code>&gt;&gt;&gt; cd Desktop/\n\n&gt;&gt;&gt; mkdir Django-and-Folium\n\n&gt;&gt;&gt; cd Django-and-Folium\n\n&gt;&gt;&gt; python -m venv venv\n\n&gt;&gt;&gt; source venv/bin/activate    *Linux or Git Bash on Windows*\n\n&gt;&gt;&gt; venv\\Scripts\\activate   *On Windows*\n\n&gt;&gt;&gt; python -m pip install django==4.1.3 django-crispy-forms folium==0.14.0\n\n&gt;&gt;&gt; django-admin startproject backend\n\n&gt;&gt;&gt; cd backend\n\n&gt;&gt;&gt; python manage.py startapp maps\n\n&gt;&gt;&gt; python manage.py migrate\n\n&gt;&gt;&gt; python manage.py createsuperuser\n</code></pre> <p>These commands will create a virtual environment and install the required libraries and packages for this project and create a new Django app called maps.</p> <p>Register the newly created app and <code>crispy_forms</code> app inside the installed apps settings.</p> <pre><code>\n# backend/settings.py\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n\n    # My Apps:\n    'maps.apps.MapsConfig',\n\n    # Other Apps\n    'crispy_forms',\n]\n\n# Also choose a template pack for django-cripsy-forms settings in the bottom of the file:\n\n\nCRISPY_TEMPLATE_PACK = 'bootstrap4'\n</code></pre> <p>In this tutorial we will use an app-level url configurations, so the last thing we need to do in this step is to create a urls/py file and map it in our main project urls.py</p> <ul> <li>Edit backend/urls.py to match the image below:</li> </ul> <pre><code>\n# backend/urls.py\n\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('maps.urls')),\n]\n\n</code></pre> <ul> <li>Create a new file called urls.py inside the app directory and type the following code inside it:</li> </ul> <pre><code>\n# maps/urls.py\n\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n\n]\n\n</code></pre> <p>The <code>urlpatterns</code> is currently empty we will map the Django views to it later in the tutorial.</p>"},{"location":"tutorials/Django/Django-and-Folium/Django-and-Folium/#app-setup","title":"App Setup","text":"<p>Let's start setting ip our app. I like to follow the following steps to setup my apps</p> <ul> <li> <p>Create Django Model</p> </li> <li> <p>Create the View</p> </li> <li> <p>Map the View to <code>urls</code> configurations</p> </li> <li> <p>Create the template</p> </li> </ul> <p>So we will start by creating the Model, We will create a Feature model that has the following fields (name, description, latitude, longitude)</p> <pre><code>\n# maps/models.py\n\nfrom django.db import models\n\n\nclass Feature(models.Model):\n    name = models.CharField(max_length=250, help_text='Feature Name')\n    description = models.TextField(help_text='Feature Description')\n    latitude = models.FloatField(help_text='Latitude')\n    longitude = models.FloatField(help_text='Longitude')\n\n\n    class Meta:\n        verbose_name = (\"feature\")\n        verbose_name_plural = (\"features\")\n\n    def __str__(self):\n        return f'{self.name}'\n\n</code></pre> <p>Register the model in Django admin site:</p> <p>open <code>maps/admin.py</code> and add the following code:</p> <pre><code>\nfrom django.contrib import admin\n\nfrom .models import Feature\n\n\nadmin.site.register(Feature)\n</code></pre> <p>After creating a Model and registering it, we need to run the <code>makemigrations</code> command:</p> <pre><code>\n&gt;&gt;&gt; python manage.py makemigrations\n\n&gt;&gt;&gt; python manage.py migrate\n\n</code></pre> <p>Now let's move to the View.</p> <p>We will split our code into two files here a new file we will create called <code>utils.py</code> and the main <code>views.py</code> file.</p> <p>Inside the <code>maps</code> app directory create a new file called <code>utils.py</code> this file will contain a setup for Folium base map and we will loop through the data inside our database:</p> <pre><code>\n# maps/utils.py\n\nimport folium\nfrom folium.plugins import Fullscreen, LocateControl, Geocoder\n\nfrom .models import Feature\n\n\ndef basemap(request):\n    \"\"\"\n    Create a Folium base map\n    \"\"\"\n    map = folium.Map(\n        tiles='cartodbdark_matter',\n        attr= 'Public Schools in Seattle'\n    )\n\n    features = Feature.objects.all()\n\n    features_layer = folium.FeatureGroup(name='Features Layer').add_to(map)\n\n    for feature in features:\n        locations = [feature.latitude, feature.longitude]\n        folium.Marker(\n            locations,\n            tooltip= str(feature.name),\n            popup= feature.description\n        ).add_to(features_layer)\n\n    folium.TileLayer('cartodbpositron').add_to(map)\n\n    folium.LayerControl(position='bottomright').add_to(map)\n    Fullscreen().add_to(map)\n    LocateControl().add_to(map)\n    Geocoder().add_to(map)\n    folium.LatLngPopup().add_to(map)\n\n\n\n    map = map._repr_html_()\n\n    context = {\n        'map': map\n    }\n\n    return context\n</code></pre> <p>Now inside the <code>maps/views.py</code> add the following code:</p> <pre><code>\n# maps/views.py\n\nfrom django.shortcuts import render\nfrom django.urls import reverse_lazy\nfrom django.views import generic\nfrom django.http import HttpResponse\nfrom django.contrib import messages\n\nfrom .models import Feature\nfrom .utils import basemap\n\n\ndef index(request):\n    map = basemap(request)\n    return render(request, 'map.html', map)\n\n\nclass CreateFeature(generic.CreateView):\n    model = Feature\n    fields = ['name', 'type', 'description', 'latitude', 'longitude']\n    template_name = 'create_feature.html'\n    success_url = reverse_lazy('index')\n\n    def get_context_data(self, **kwargs):\n        map = folium.Map(\n        tiles='cartodbdark_matter',\n        attr= 'Django and Folium'\n    )\n\n        folium.TileLayer('cartodbpositron').add_to(map)\n\n        folium.LayerControl(position='bottomright').add_to(map)\n        Fullscreen().add_to(map)\n        LocateControl().add_to(map)\n        Geocoder().add_to(map)\n        folium.LatLngPopup().add_to(map)\n\n        map = map._repr_html_()\n        context = super().get_context_data(**kwargs)\n        context['map'] = map\n        return context\n\n</code></pre> <p>This code creates two Django views:</p> <ul> <li> <p>index: which is a Django Function-Based view that will be used to render the map page of our application which will contain the map.</p> </li> <li> <p>CreateFeature: A Django Class-Based view that will allow the users to create new features.</p> </li> </ul> <p>Now that our views are done, we will have to map the URLs configurations and create the templates.</p> <p>Open the <code>maps/urls.py</code> file and add the following code:</p> <pre><code>\nfrom django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('create-feature/', views.CreateFeature.as_view(), name='create-feature'),\n]\n\n</code></pre> <p>This will create two paths, One for displaying the map, and the other for creating new features.</p> <p>Our final Step is to create the templates.</p> <p>Create a new folder inside the maps app and call it templates.</p> <p>Then create three HTML files inside it <code>base.html</code>, <code>map.html</code>, and <code>create_feature.html</code></p> <p>We will Django template inheritance so, both the <code>map.html</code> and <code>create_feature.html</code> will inherit its content from <code>base.html</code>.</p> <p><code>templates/base.html</code></p> <pre><code>&lt;!-- maps/templates/base.html --&gt;\n\n{% load static %}\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;!-- Required meta tags --&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;\n\n    &lt;!-- Bootstrap CSS --&gt;\n    &lt;link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65\" crossorigin=\"anonymous\"&gt;\n\n\n    &lt;title&gt;{% block title %}{% endblock title %}&lt;/title&gt;\n\n    &lt;style&gt;\n        li {\n            list-style: none;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;!-- Start Navbar --&gt;\n\n    &lt;nav class=\"navbar navbar-expand-lg navbar-light bg-light\"&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;a class=\"navbar-brand\" href=\"{% url 'index' %}\"&gt;Folium Map&lt;/a&gt;\n            &lt;button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\"\n                aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt;\n                &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\n            &lt;/button&gt;\n        &lt;/div&gt;\n    &lt;/nav&gt;\n\n    &lt;!-- End Navbar --&gt;\n\n\n    &lt;!-- Start Main Container --&gt;\n\n    &lt;div class=\"container mt-4\"&gt;\n        &lt;!-- Start Folium Map --&gt;\n        {% block map %}{% endblock map %}\n        &lt;!-- End Folium Map --&gt;\n\n        &lt;!-- Start Folium Map --&gt;\n        {% block content %}{% endblock content %}\n        &lt;!-- End Folium Map --&gt;\n    &lt;/div&gt;\n\n    &lt;!-- End Main Container --&gt;\n\n    &lt;!-- Optional JavaScript; choose one of the two! --&gt;\n\n    &lt;!-- Option 1: Bootstrap and Popper --&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js\" integrity=\"sha384-oBqDVmMz9ATKxIep9tiCxS/Z9fNfEXiDAYTujMAeBAsjFuCZSmKbSSUnQlmh/jp3\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n    &lt;script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.min.js\" integrity=\"sha384-cuYeSxntonz0PPNlHhBs68uyIAVpIIOZZ5JqeqvYYIcEL727kskC66kF92t6Xl2V\" crossorigin=\"anonymous\"&gt;&lt;/script&gt;\n\n&lt;/body&gt;\n\n&lt;/html&gt;\n\n</code></pre> <p><code>maps/templates/map.html</code></p> <pre><code>&lt;!-- maps/templates/map.html --&gt;\n\n{% extends 'base.html' %}\n{% block title %}Django and Folium{% endblock title %}\n\n{% block map %}\n    {{ map|safe }}\n{% endblock map %}\n\n</code></pre> <p><code>maps/templates/create_feature.html</code></p> <pre><code>&lt;!-- maps/templates/create_feature.html --&gt;\n\n{% extends \"base.html\" %}\n{% load crispy_forms_tags %}\n\n{% block content %}\n    &lt;div class=\"row\"&gt;\n        &lt;div class=\"col-4\"&gt;\n            &lt;form action=\"{% url 'create-feature' %}\" method=\"post\"&gt;\n                {% csrf_token %}\n                {{ form|crispy }}\n                &lt;button class=\"btn btn-primary mt-2\" type=\"submit\"&gt;Import&lt;/button&gt;\n            &lt;/form&gt;\n        &lt;/div&gt;\n        &lt;div class=\"col-8\"&gt;\n            {{ map|safe }}\n        &lt;/div&gt;\n    &lt;/div&gt;\n{% endblock content %}\n\n</code></pre>"},{"location":"tutorials/GIS/gis/","title":"Gis","text":""},{"location":"tutorials/GIS/gis/#gis","title":"GIS","text":""},{"location":"tutorials/GIS/gis/#network-analysis","title":"Network Analysis","text":""},{"location":"tutorials/GIS/gis/#qgis3","title":"QGIS3","text":"<ul> <li> <p>Point to Point Analysis (Shortest path)</p> </li> <li> <p>Point to Point Analysis (Fastest path)</p> </li> <li> <p>Service Area Analysis (From Layer)</p> </li> </ul>"},{"location":"tutorials/GIS/gis/#spatial-databases","title":"Spatial Databases","text":"<ul> <li> <p>Create a Spatialite database and insert data inside it</p> </li> <li> <p>Install PostgreSQL and PostGIS on Windows OS</p> </li> <li> <p>Create, manage and query a PostGIS spatial database</p> </li> </ul>"},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/","title":"Point to Point Analysis (Shortest path):","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#point-to-point-analysis-shortest-path","title":"Point to Point Analysis (Shortest path):","text":"<ul> <li>Point-to-point network analysis is one of the most used network analysis,  we use it to calculate the shortest or fastest route between two points (Starting and Ending points).</li> </ul>"},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#goal","title":"Goal:","text":"<ul> <li>Calculate the closest route between two points in the city of Dijon using OSM (Open Street Map) free data.</li> </ul>"},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#download-the-required-data","title":"Download the required data:","text":"<p>Data Sources:</p> <p>GADM</p> <p>Geofabrik</p> <ul> <li>First go to GADM website by clicking on the following link GADM and from the Country drop down menu choose France. Then click on Shapefile to download it:</li> </ul> <p></p> <ul> <li>Now go to Geofabrik website to download free OSM data exactly the Bourgogne region of France where Dijon city is located by clicking on this link Geofabrik</li> </ul> <p></p> <ul> <li>Save the data files and extract the zip files in any location you want (you can leave it in the downloads folder for easy access to it).</li> </ul>"},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-1-add-the-gadm36_fra_4shp-layer","title":"Step 1: Add the gadm36_FRA_4.shp layer:","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-2-in-qgis-window-open-the-processing-menu-and-click-on-toolbox","title":"Step 2: In QGIS window open the Processing menu and click on Toolbox:","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-3-from-the-processing-toolbox-select-vector-selection-then-extract-by-expression-option-which-allows-us-to-extract-data-to-a-new-layer-by-using-an-expression","title":"Step 3: From the Processing Toolbox select Vector selection then Extract by expression option which allows us to extract data to a new layer by using an expression:","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-4-the-extract-by-expression-window-will-open-now-click-on-the-expression-icon","title":"Step 4: The Extract by expression window will open, now click on the Expression icon:","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-5-in-the-search-box-type-name-then-double-click-on-the-name_4-from-fields-and-values","title":"Step 5: In the search box type name, then, double click on the NAME_4 from Fields and Values:","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-6-now-complete-the-expression-as-follow-name_4-dijon-to-extract-the-dijon-city-boundaries-and-then-click-ok","title":"Step 6:  Now complete the expression as follow (\u201cNAME_4\u201d = \u2018Dijon\u2019) to extract the Dijon city boundaries and then click Ok:","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-7-click-run-to-run-the-algorithm-a-new-layer-called-matching-features-will-be-created","title":"Step 7: Click Run to run the algorithm, A new layer called Matching features will be created:","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-8-turn-off-the-gadm36_fra_4shp-layer-and-right-click-on-the-matching-features-layer-then-select-zoom-to-layers-to-see-the-result","title":"Step 8: Turn off the gadm36_FRA_4.shp layer and right click on the Matching features layer then select Zoom to layers to see the result:","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-9-open-the-styling-panel-to-style-the-newly-created-layer-then-choose-the-outline-blue-style","title":"Step 9: Open the Styling panel to style the newly created layer, then choose the outline blue style:","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-10-now-we-can-add-the-second-data-layer-gis_osm_roads_free_1shp","title":"Step 10: Now we can add the second data layer: gis_osm_roads_free_1.shp:","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-11-from-the-processing-toolbox-vector-selection-choose-extract-by-location-tool","title":"Step 11: From the Processing Toolbox &gt; Vector selection choose Extract by location tool:","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-12-the-extract-by-location-window-will-appear-in-the-extract-features-from-choose-the-gis_osm_roads_free_1shp-layer-and-in-the-where-the-features-geometric-predicate-check-only-are-within-option-and-in-by-comparing-to-the-features-from-choose-the-matching-features-layer-then-click-run","title":"Step 12: The Extract by location window will appear. In the Extract features from choose the gis_osm_roads_free_1.shp layer. And in the Where the features (geometric predicate) check only (are within) option, and in By comparing to the features from choose the Matching features layer, then click Run:","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-13-turn-off-the-gis_osm_roads_free_1shp-layer-to-see-the-results-well","title":"Step 13: Turn off the gis_osm_roads_free_1.shp layer to see the results well:","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-14-now-we-can-choose-a-good-style-for-our-new-layer-back-to-the-styling-panel-choose-the-topo-road-style-for-the-extracted-location-layer","title":"Step 14: Now we can choose a good style for our new layer, back to the styling panel choose the Topo road style for the Extracted (location layer) :","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-15-now-its-time-for-the-network-analysis-shortest-path-point-to-point-back-the-processing-toolbox-network-analysis-shortest-path-point-to-point","title":"Step 15: Now, It\u2019s time for the Network analysis (Shortest path point to point), Back the Processing Toolbox &gt; Network Analysis &gt; Shortest path (point to point):","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-16-make-sure-that-the-extracted-location-layer-is-selected-as-the-vector-layer-representing-network-and-then-click-on-the-icon-next-to-the-start-point-to-pick-a-start-point-from-the-layer-then-do-the-same-for-the-end-point","title":"Step 16: Make sure that the Extracted (location) layer is selected as the Vector layer representing network, and then click on the icon next to the Start point to pick a start point from the layer, then do the same for the End point:","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-17-in-the-advanced-parameter-choose-the-oneway-field-as-the-direction-field-and-f-for-the-value-for-forward-direction-t-for-value-for-backward-direction-and-b-for-value-for-both-directions-finally-click-run-to-run-the-algorithm","title":"Step 17: In the Advanced parameter, choose the oneway field as the Direction field, and F for the Value for forward direction, T for Value for backward direction, and B for Value for both directions, Finally click Run to run the algorithm :","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-18-a-new-layer-called-shortest-path-will-be-created-lets-choose-a-different-style-like-topo-main-road-so-we-can-see-it","title":"Step 18: A new layer called Shortest path will be created, let\u2019s choose a different style like (Topo main road) so we can see it:","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#step-19-thats-it-here-is-the-shortest-path-between-the-start-and-end-point-that-we-picked","title":"Step 19: That\u2019s it, Here is the Shortest path between the start and end point that we picked!","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/1-point-to-point-shortest-path/steps/#further-articles-and-blog-posts-to-learn-more","title":"Further articles and blog posts to learn more:","text":"<p>GIS Geography</p> <p>QGIS Tutorials</p>"},{"location":"tutorials/GIS/Network_Analysis/QGIS3/2-point-to-point-fastest-path/steps/","title":"Point to Point Analysis (Fastest path):","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/2-point-to-point-fastest-path/steps/#point-to-point-analysis-fastest-path","title":"Point to Point Analysis (Fastest path):","text":"<ul> <li> <p>This is the second and final tutorial on GIS network analysis (Point-to-point analysis) Where we will calculate the fastest route between 2 points in Dijon city.</p> </li> <li> <p>We will continue from where we left of in the first tutorial you can find it point-to-point-shortest-path</p> </li> </ul>"},{"location":"tutorials/GIS/Network_Analysis/QGIS3/2-point-to-point-fastest-path/steps/#goal","title":"Goal:","text":"<ul> <li> <p>Explore some of GIS operations like selecting data by expression and editing data inside the Attribute Table.</p> </li> <li> <p>Calculate the fastest route between two points in the city of Dijon using OSM (Open Street Map) free data.</p> </li> </ul>"},{"location":"tutorials/GIS/Network_Analysis/QGIS3/2-point-to-point-fastest-path/steps/#required-data","title":"Required data:","text":"<p>Data Sources:</p> <ul> <li> <p>GADM</p> </li> <li> <p>Geofabrik</p> </li> </ul> <p>We will use the same data we extracted on the last tutorial:</p> <ul> <li>Matching features layer which is extracted from a shapefile containing the cantons of France which is the boundaries of Dijon canton.</li> <li>Extracted (location) layer which contains the roads inside Dijon canton.</li> </ul>"},{"location":"tutorials/GIS/Network_Analysis/QGIS3/2-point-to-point-fastest-path/steps/#step-by-step-tutorial","title":"Step by Step Tutorial:","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/2-point-to-point-fastest-path/steps/#step-1-right-click-on-the-extracted-location-layer-and-select-open-attribute-table","title":"Step 1: Right-click on the Extracted (location) layer and select Open Attribute Table:","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/2-point-to-point-fastest-path/steps/#step-2-sort-the-values-inside-the-attribute-table-then-edit-it","title":"Step 2: Sort the values inside the Attribute table then edit it:","text":"<ul> <li> <p>We need to sort the maxspeed field by ascending order by clicking on it one time, we will see that there are alot of rows that have the value of zero, we need to fix this.</p> </li> <li> <p>We will start by selecting all the values that have a 0 value by clicking on the Select by expression icon:</p> </li> </ul> <p></p> <ul> <li>Then we search for the field maxspeed and double click on it to select it for the expression, and now we can complete the expression as follow \"maxspeed\" = 0</li> </ul> <p></p> <ul> <li>Now we click on the Select features button, we will see that all the rows that has a value of 0 in the maxspeed field are now selected.</li> </ul> <p></p> <ul> <li> <p>Then, we will edit all the selected values to be 10 (I know this is not the correct way to edit the data, in the real world we need to insert the correct maxspeed value for each road, but this is only for practice, so we can make pick any value for those missing data which will be better than leaving it as zeros).</p> </li> <li> <p>We need to turn on the editing mode to start editing the data, and from the field dropdown menu we select the maxspeed field:</p> </li> </ul> <p></p> <p></p> <p></p> <ul> <li>We type the value 10 inside the update values box and click on the Update Selected to only update the selected values.</li> </ul> <p>[!WARNING] If you clicked on the Update All button all the values inside the maxspeed field in the Attribute Table will be changed to 10 (This is not what we need!)</p> <p></p> <ul> <li>Now deselect all the values bu clicking on the Deselect all features from the layer icon, and then save the edits and turn off the editing mode, then close the Attribute Table:</li> </ul> <p></p> <p></p> <p></p> <p></p>"},{"location":"tutorials/GIS/Network_Analysis/QGIS3/2-point-to-point-fastest-path/steps/#step-3-calculate-the-fastest-path-between-two-points-start-and-end-points","title":"Step 3: Calculate the Fastest path between two points (Start and End points):","text":"<ul> <li> <p>Open the Processing Toolbox by Clicking on the Processing menu then chosing the Toolbox:</p> </li> <li> <p>From the Processing Toolbox, expand the Network analysis, and open the Shortest path (point-to-point) algorithm:</p> </li> </ul> <p></p> <p></p> <ul> <li> <p>Make sure that the Extracted (location) layer is selected as the Vector layer representing network.</p> </li> <li> <p>In the Path type to calculate choose the Fastest.</p> </li> </ul> <p></p> <p></p> <ul> <li>choose the Start and End point:</li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p> <ul> <li>In the Advanced parameter, choose the oneway field as the Direction field, and F for the Value for forward direction, T for Value for backward direction, B for Value for both directions, and maxspeed as the Speed field,  Finally click Run to run the algorithm:</li> </ul> <p></p> <p></p> <p></p> <ul> <li>A new layer called Shortest path will be created, let\u2019s choose a different style like (Topo main road) so we can see it:</li> </ul> <p></p> <p></p> <p></p> <p></p> <ul> <li>Right-click on the Shortest path layer, then, click on the Zoom to layers to see the end result:</li> </ul> <p></p> <p></p> <p></p> <ul> <li>That's it, We have the fastest route we can choose between the Starting and ending point by considering the maxspeed of each road in our network data set.</li> </ul>"},{"location":"tutorials/GIS/Network_Analysis/QGIS3/2-point-to-point-fastest-path/steps/#further-articles-and-blog-posts-to-learn-more","title":"Further articles and blog posts to learn more:","text":"<p>GIS Geography</p> <p>QGIS Tutorials</p>"},{"location":"tutorials/GIS/Network_Analysis/QGIS3/3-service-area-from-layer/steps/","title":"Service Area Analysis (From layer):","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/3-service-area-from-layer/steps/#service-area-analysis-from-layer","title":"Service Area Analysis (From layer):","text":"<ul> <li> <p>In this tutorial we will learn how to use the Service Area Network Analysis () in Dijon city.</p> </li> <li> <p>We will continue from where we left of in the second tutorial you can find it point-to-point-fastest-path</p> </li> </ul>"},{"location":"tutorials/GIS/Network_Analysis/QGIS3/3-service-area-from-layer/steps/#goal","title":"Goal:","text":"<ul> <li> <p>Download free OSM data using the QuickOSM Plugin for QGIS</p> </li> <li> <p>Show all the roads that the hospitals in Dijon can cover in 10 minutes.</p> </li> </ul>"},{"location":"tutorials/GIS/Network_Analysis/QGIS3/3-service-area-from-layer/steps/#required-data","title":"Required data:","text":"<p>Data Sources:</p> <ul> <li> <p>GADM</p> </li> <li> <p>Geofabrik</p> </li> </ul> <p>We will use the same data we extracted on the last tutorial:</p> <ul> <li>Matching features layer which is extracted from a shapefile containing the cantons of France which is the boundaries of Dijon canton.</li> <li>Extracted (location) layer which contains the roads inside Dijon canton.</li> </ul>"},{"location":"tutorials/GIS/Network_Analysis/QGIS3/3-service-area-from-layer/steps/#step-by-step-tutorial","title":"Step by Step Tutorial:","text":""},{"location":"tutorials/GIS/Network_Analysis/QGIS3/3-service-area-from-layer/steps/#step-1-download-and-style-the-data","title":"Step 1 Download and style the data:","text":"<ul> <li>Click on the Plugins menu from QGIS toolbar and then click on Manage and Install Plugins:</li> </ul> <ul> <li>In the search bar type QuickOSM and then click on Install Plugin:</li> </ul> <ul> <li>Open the QuickOSM plugin by clicking on its icon:</li> </ul> <ul> <li>The plugin menu will appear, In the Preset search bar type hospital and click on Facilities/Health/Hospital, A new Query will appear which for all the hospitals. Then in the location type Dijon, To search for Hospitals that are located in Dijon only. Finally click on Run query:</li> </ul> <ul> <li>Two new layers are added by the query, a point and a polygon layer, let's turn off the polygon layer as we will not use it.</li> </ul> <ul> <li>Let's choose a new style for the \"amenity hospital healthcare hospital Dijon\" layer:</li> </ul> <ul> <li>We can have a look at the Attribute table to see its content:</li> </ul>"},{"location":"tutorials/GIS/Network_Analysis/QGIS3/3-service-area-from-layer/steps/#step-2-network-analysis-service-area","title":"Step 2 Network Analysis Service Area:","text":"<ul> <li>Click on the Processing menu from QGIS toolbar then open the Toolbox.</li> </ul> <ul> <li>From the Processing Toolbox go to Network analysis &gt; Service area (from layer).</li> </ul> <ul> <li>The Service Area (from layer) algorithm window will open, Choose the \"Extracted (location)\" layer as the Vector layer representing network. Then, choose \"Fastest\" as the Path type to calculate, this type takes the Travel cost as time, In our case we will make it as 10 minutes:</li> </ul> <ul> <li>In the Advanced parameter, choose the oneway field as the Direction field, and F for the Value for forward direction, T for Value for backward direction, B for Value for both directions, and maxspeed as the Speed field,  Finally click Run to run the algorithm:</li> </ul>"},{"location":"tutorials/GIS/Network_Analysis/QGIS3/3-service-area-from-layer/steps/#further-articles-and-blog-posts-to-learn-more","title":"Further articles and blog posts to learn more:","text":"<p>GIS Geography</p>"},{"location":"tutorials/GIS/Spatial_Databases/Create_PostGIS_Database/postgresql_and_postgis/","title":"Create a PostGIS Database:","text":""},{"location":"tutorials/GIS/Spatial_Databases/Create_PostGIS_Database/postgresql_and_postgis/#create-a-postgis-database","title":"Create a PostGIS Database:","text":"<ul> <li> <p>This is the second tutorial about using PostgreSQL database and PostGIS spatial extension, you can find the first tutorial which cover installing PostgreSQL and PostGIS on Windows os here</p> </li> <li> <p>In this tutorial we will learn how to create a PostgreSQL database and add PostGIS spatial extension to it.</p> </li> <li> <p>I will use the same data I used in my SpatiaLite database tutorial you can find it here</p> </li> </ul>"},{"location":"tutorials/GIS/Spatial_Databases/Create_PostGIS_Database/postgresql_and_postgis/#steps","title":"Steps","text":"<ul> <li>Create a Server inside pgAdmin 4 to contain PostGIS databases </li> <li>Create a PostgreSQL database and add an extension to PosGIS</li> <li>Connect PostGIS database in QGIS</li> <li>Add data to PostGIS database using QGIS DB Manager</li> <li>Run SQL Queries in pgAdmin 4</li> </ul>"},{"location":"tutorials/GIS/Spatial_Databases/Create_PostGIS_Database/postgresql_and_postgis/#create-a-server-inside-pgadmin-4-to-contain-postgis-databases","title":"Create a Server inside pgAdmin 4 to contain PostGIS databases:","text":"<ul> <li> <p>Open start menu and search for pgAdmin 4 then open it.</p> </li> <li> <p>When you open pgAdmin it will ask you to enter your password, enter it and click Ok.</p> </li> </ul> <p></p> <p></p> <ul> <li> <p>Expand the Servers to see its content (It will ask you to type your password again, you can save your password for future use).</p> </li> <li> <p>You will see a server called PostgreSQL 14 which we can use to create databases inside it, But, we will register a new server which will contain only databases with PostGIS spatial extension.</p> </li> </ul> <p></p> <p></p> <ul> <li>Rigth click on Servers and choose Register &gt; Server  </li> </ul> <p></p> <ul> <li>The Register - Server window will appear. In the Name box type PostGIS (or any other name you want).</li> </ul> <p></p> <p></p> <ul> <li> <p>Next, Click on the Connection tab and type localhost as the Host name / address (meaning that our server will run locally in our computer), and keep the Port, Maintenance database and Username with their default values (5432, postgres, postgres).</p> </li> <li> <p>Add a password to your server (you can choose the same password for the database and other servers ) then toggle the Save password option, Finally click Save.</p> </li> </ul> <p></p> <ul> <li>You will see that a new Server called PostGIS added to your Servers in pgAdmin Browser panel</li> </ul> <p></p>"},{"location":"tutorials/GIS/Spatial_Databases/Create_PostGIS_Database/postgresql_and_postgis/#create-a-postgresql-database-and-add-an-extension-to-posgis","title":"Create a PostgreSQL database and add an extension to PosGIS","text":"<ul> <li>Expand the PostGIS Server and right click on Databases and choose Create &gt; Database...</li> </ul> <ul> <li>The Create - Database window will appear. Type us_states ad the Database which will create a database called us_states (Also you can name your database whatever you like).</li> </ul> <ul> <li>Click on SQL tab to see the SQL command which will be used by pgAdmin to create your database then click Save:</li> </ul> <ul> <li>Now its time to add an PostGIS extension to our new database. Expand the us_states database and right click on Extensions then choose Create &gt; Extension...</li> </ul> <ul> <li>The Create - Extension window will appear. In the Name type postgis and left choose it from the dropdown menu.</li> </ul> <ul> <li>Again click on the SQL tab to see the SQL command that pgAdmin will use to add an extension to the database. Then click Save.</li> </ul> <ul> <li>Now that we have a PostgreSQL database with the PostGIS spatial extension added to it we can continue to our next step to connect our database to QGIS.</li> </ul>"},{"location":"tutorials/GIS/Spatial_Databases/Create_PostGIS_Database/postgresql_and_postgis/#connect-postgis-database-in-qgis","title":"Connect PostGIS database in QGIS","text":"<ul> <li> <p>Open the QGIS software and create a new blank project.</p> </li> <li> <p>Add the 'us_state_pop' shapefile to the project interface as this is the data we are going to add to our database.</p> </li> </ul> <p></p> <p></p> <ul> <li>Now, from the QGIS Browser panel right click on PostGIS and click on New Connection...</li> </ul> <p></p> <p></p> <ul> <li>The Create a New PostGIS Connection window will appear. Type us_states as the Name of the connection, localhost as the Host, 5432 as the Port and us_states as the Database. Then click on Basic inside Authentication panel:</li> </ul> <p></p> <p></p> <ul> <li>In the Basic Authentication type your database username (postgres) and your password and click on Store to save your credentials for future use. Finally click Ok to connect to the database</li> </ul> <p></p> <p></p> <ul> <li>You will see a warning about saving your password inside QGIS. But its okay if you are the only one using your computer. Click Ok to confirm or Cancel then uncheck the Store checkboxes if there is someone else who has access to your computer.</li> </ul> <p></p>"},{"location":"tutorials/GIS/Spatial_Databases/Create_PostGIS_Database/postgresql_and_postgis/#add-data-to-postgis-database-using-qgis-db-manager","title":"Add data to PostGIS database using QGIS DB Manager","text":"<ul> <li>In the QGIS window click on Database and choose DB Manager...</li> </ul> <ul> <li>The DB Manager window will appear, Expand the PostGIS and us_states database to connect to the database and see its content</li> </ul> <ul> <li> <p>Now its time to add our data to the database.</p> </li> <li> <p>In the QGIS DB Manager window click on the Import Layer/File... button.</p> </li> <li> <p>The Import vector layer will appear. In the Input dropdown menu choose the us_state_pop shapefile and in the Schema dropdown menu choose the public scheme.</p> </li> </ul> <p></p> <ul> <li>As we did in the SpatiaLite tutorial we can add an id to our database table and Create a spatial index which will help us to query the database fast. Finally click Ok to load the data to the database.</li> </ul> <p></p> <p></p> <ul> <li>You will see a new table called us_state_pop added to our public schema, expand it and click on the Table tab to see its content</li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p> <ul> <li>We can run our SQL queries inside QGIS DB Manager like we did in the SpatiaLite tutorial, But, in this tutorial lets use another option which is pgAdmin. That's what we are going to do the next step.</li> </ul>"},{"location":"tutorials/GIS/Spatial_Databases/Create_PostGIS_Database/postgresql_and_postgis/#run-sql-queries-in-pgadmin-4","title":"Run SQL Queries in pgAdmin 4","text":"<ul> <li>Back to pgAdmin 4 if we expand the us_states Schemas &gt; public &gt; Tables we will see the us_state_pop table added to our database.</li> </ul> <ul> <li>Expand the table to see its content</li> </ul> <ul> <li>Now, lets use SQL to Query our database. Right click on the us_state_pop and choose Query Tool</li> </ul> <ul> <li>A new Query window will appear which we can use to type our SQL queries</li> </ul> <ul> <li>Let's type a SQL query to see all the content in our table and click the arrow button to execute the query</li> </ul> <p>SELECT * FROM us_state_pop;</p> <p></p> <p></p> <p></p> <ul> <li>Another SQL query which will return the name and population count of all the us states that has more than 10 million population count.</li> </ul> <p>SELECT name_1, pop FROM us_state_pop WHERE pop &gt; 10000000;</p> <p></p> <ul> <li>The next query will return the same output of the last query but the data will be orderd descendingly by the population count:</li> </ul> <p>SELECT name_1, pop FROM us_state_pop WHERE pop &gt; 10000000 ORDER BY pop DESC;</p> <p></p> <ul> <li>That's it for today's tutorial. We learned how to use the free PostgreSQL database management software pgAmin to create, manage and query a spatial database.</li> </ul>"},{"location":"tutorials/GIS/Spatial_Databases/Create_PostGIS_Database/postgresql_and_postgis/#further-articles-to-learn-more","title":"Further articles to learn more:","text":"<p>Creating a Spatial Database</p>"},{"location":"tutorials/GIS/Spatial_Databases/PostgreSQL_and_PostGIS/postgresql_and_postgis/","title":"Install PostgreSQL and PostGIS Databases:","text":""},{"location":"tutorials/GIS/Spatial_Databases/PostgreSQL_and_PostGIS/postgresql_and_postgis/#install-postgresql-and-postgis-databases","title":"Install PostgreSQL and PostGIS Databases:","text":"<ul> <li>In this tutorial we will learn how to install PostgreSQL and PostGIS databases.</li> </ul>"},{"location":"tutorials/GIS/Spatial_Databases/PostgreSQL_and_PostGIS/postgresql_and_postgis/#steps","title":"Steps","text":"<ul> <li>Download postgresql 14 windows x64 execution file</li> <li>Install PostgreSQL</li> <li>Install PostGIS</li> </ul>"},{"location":"tutorials/GIS/Spatial_Databases/PostgreSQL_and_PostGIS/postgresql_and_postgis/#download-postgresql-14-windows-x64","title":"Download postgresql 14 windows x64:","text":"<p>Official Website:</p> <p>PostgreSQL</p> <ul> <li> <p>Go to PostgreSQL website download page for windows by clicking on the following link PostgreSQL</p> </li> <li> <p>Click on the download the installer:</p> </li> </ul> <p></p> <ul> <li>Click on the Windows x86-64 icon next to the PostgreSQL Version 14.4 to download the file:</li> </ul> <p></p>"},{"location":"tutorials/GIS/Spatial_Databases/PostgreSQL_and_PostGIS/postgresql_and_postgis/#install-postgresql","title":"Install PostgreSQL","text":"<ul> <li>After downloading go to your Downloads folder and double click on the 'postgresql-14.4-1-windows-x64.exe' to run the installer:</li> </ul> <ul> <li>Click Yes when the User Account Control window appear to run the file:</li> </ul> <ul> <li>Click next to start the installation:</li> </ul> <ul> <li>Choose the Installation Directory by clicking on the icon next to it, or click next to choose the default directory, here we will accept the default directory:</li> </ul> <ul> <li>Here we can choose what we want to install, Keep all the options selected and click next:</li> </ul> <ul> <li>Now we can choose where to save our data, We can also click next to choose the default directory:</li> </ul> <ul> <li>We need to choose a password for our postgre admin account, fill a password and retype it again then click Next:</li> </ul> <ul> <li>Here we choose the Port which PostgreSQL will run on, Click Next to keep the default port 5432:</li> </ul> <ul> <li>Click Next to keep the Default Locale:</li> </ul> <ul> <li>A Pre Installation Summary will appear to tell you what will be installed and where, Click Next to confirm:</li> </ul> <ul> <li>Click Next again to start the installation:</li> </ul> <ul> <li>Wait for the installation to finish:</li> </ul> <ul> <li>After the installation is completed make sure that the icon next to Stack Builder is checked to open it and install other options (PostGIS spatial database extension for our example):</li> </ul>"},{"location":"tutorials/GIS/Spatial_Databases/PostgreSQL_and_PostGIS/postgresql_and_postgis/#install-postgis","title":"Install PostGIS","text":"<ul> <li> <p>Now that PostgreSQL database is installed we can use the Stack Builder to install PostGIS spatial database extension.</p> </li> <li> <p>The Stack Builder 4.2.1 window will open after we complete installing PostgreSQL database.</p> </li> <li> <p>Click on the down arrow to select the installed version of PostgreSQL then click Next:</p> </li> </ul> <p></p> <p></p> <p></p> <ul> <li>Click on the plus icon next to Spatial Extensions and choose \"PostGIS 3.2 Bundle for PostgreSQL 14 (x64 bit: v3.2.1\", then click Next:</li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p> <ul> <li>Click Next to choose the default download directory and wait for the download process to complete:</li> </ul> <p></p> <p></p> <ul> <li>Click Next to start installing PostGIS (make sure to leave the Skip Installation option unchecked):</li> </ul> <p></p> <p></p> <ul> <li>The PostGIS 3.2 Bundle for PostgreSQL 14 Setup window will open, Click on I Agree to start installing PostGIS:</li> </ul> <p></p> <ul> <li>Click Next. (No need to check the checkbox to Create a spatial databse because we are going to use pgAdmin to create a PostGIS spatial database in the next tutorial)</li> </ul> <p></p> <ul> <li>Click Next to keep the default Destination folder:</li> </ul> <p></p> <ul> <li>Now, we need to click Yes to register the PROJ_LIB, GDAL_DATA, POSTGIS_ENABLED_DRIVERS and POSTGIS_ENABLED_OUTDB_RASTERS environment variables:</li> </ul> <p></p> <p></p> <p></p> <p></p> <ul> <li>Once the installation is complete, Click on Close then cilck on Finish to complete the installation process</li> </ul> <p></p> <p></p> <ul> <li> <p>That's it for today's tutorial. We just installed PostgreSQL database and PostGIS spatial database extension.</p> </li> <li> <p>In the next tutorial, we will learn how to create a PostGIS spatial database using pgAdmin 4 and how to connect to it using QGIS and how to add data inside it and Query this data using SQL.</p> </li> </ul>"},{"location":"tutorials/GIS/Spatial_Databases/SpatiaLite/spatialite/","title":"Create a Spatialite Database and Insert Data to it","text":""},{"location":"tutorials/GIS/Spatial_Databases/SpatiaLite/spatialite/#create-a-spatialite-database-and-insert-data-to-it","title":"Create a Spatialite Database and Insert Data to it","text":"<ul> <li>In this tutorial we will learn how to create a spatialite database and how to insert data to it.</li> </ul>"},{"location":"tutorials/GIS/Spatial_Databases/SpatiaLite/spatialite/#steps","title":"Steps","text":"<ul> <li>Download the required data</li> <li>Load the data to QGIS</li> <li>Create a table join between using (Join Attributes by Field Values) algorithm</li> <li>Create a Spatialite database and connect to it using QGIS DB Manager</li> <li>Insert data into the database</li> <li>Run basic SQL queries on the database</li> </ul>"},{"location":"tutorials/GIS/Spatial_Databases/SpatiaLite/spatialite/#download-the-required-data","title":"Download the required data:","text":"<p>Data Sources:</p> <p>GADM</p> <p>World Population Review</p> <ul> <li>First go to GADM website by clicking on the following link GADM and from the Country drop down menu choose United States. Then click on Shapefile to download it:</li> </ul> <p></p> <p></p> <p></p> <ul> <li>Go to World Population Review website and download the csv files containing the population data of us states.</li> </ul> <p></p> <p></p> <ul> <li> <p>We will need to download two files the 'US states - Ranked by Population 2022.csv' and the 'District of Columbia and Puerto Rico.csv'.</p> </li> <li> <p>After that we can open both files in microsoft excel or we can use a free software called Only Office to copy the data of District of Columbia to the 'US states - Ranked by Population 2022.csv'.</p> </li> </ul>"},{"location":"tutorials/GIS/Spatial_Databases/SpatiaLite/spatialite/#load-the-data-to-qgis","title":"Load the data to QGIS","text":"<ul> <li>Open a new project in QGIS software and add the 'gadm41_USA_1.shp' data file.</li> </ul> <ul> <li>Now, let's explore the attribute table of the new layer to see its content.</li> </ul> <ul> <li> <p>As we can see from the picture above the us states are inside a field called 'Name_1'. We will use this name later in the tutorial.</p> </li> <li> <p>Now, let's add the second data file. Click on the Layer menu and choose 'Add Delimited Text Layer' option. A new window will appear, click on the icon nexxt to the File name to choose the 'US states - Ranked by Population 2022.csv' file:</p> </li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p> <ul> <li>Also, In the Geometry Definition make sure to choose the 'No geometry (attribute only table)' option. Then click Add.</li> </ul> <p></p> <p></p> <p></p> <ul> <li>A new layer is added to the Layers panel.</li> </ul>"},{"location":"tutorials/GIS/Spatial_Databases/SpatiaLite/spatialite/#create-a-table-join-between-using-join-attributes-by-field-values-algorithm","title":"Create a table join between using (Join Attributes by Field Values) algorithm","text":"<ul> <li> <p>From the QGIS toolbar click on Processing menu and choose Toolbox.</p> </li> <li> <p>In the Processing Toolbox search bar type 'table join' and double click on 'Join attributes by field value' under the Vector general tools to open it.</p> </li> </ul> <p></p> <p></p> <p></p> <ul> <li>The Join Attributes by Field Value window will appear. In the Input layer option choose the 'gadm41_USA_1' layer. And in the Table field option choose 'Name_1':</li> </ul> <p></p> <p></p> <p></p> <p></p> <ul> <li>In the Input layer 2 option make sure it has our second layer 'US states - Ranked by Population 2022' and then, click on the Table field 2 to choose the field that contains the US States 'State'</li> </ul> <p></p> <p></p> <ul> <li>Click on the button next to the 'Layer 2 fields to copy (leave empty to copy all fields) optional' to choose the fields we want to join in our case we need 3 fields (Pop, Pop2021, Pop2010) click on the checkboxes next to those fields. Then click on the blue back arrow to go back to the Join Attributes by Field Value window</li> </ul> <p></p> <p></p> <ul> <li>Scroll down to the Joined layer option and click on the button next to it and choose Save to File to save the new joined layer to a shape file. Choose a name to the new layer (like us_state_pop.shp) abd a location of the new file (like on the Desktop).</li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p> <ul> <li>Now, click on Run to run the algorithm.</li> </ul> <p></p> <p></p> <p></p> <ul> <li>The new layer is added, let's see its attribute table to see the new fields</li> </ul> <p></p> <p></p> <p></p> <ul> <li>As we can see in the screen above, there are 3 new fields (Pop, Pop2021m Pop2010) added to the main layer.</li> </ul>"},{"location":"tutorials/GIS/Spatial_Databases/SpatiaLite/spatialite/#create-a-spatialite-database-and-connect-to-it-using-qgis-db-manager","title":"Create a Spatialite database and connect to it using QGIS DB Manager","text":"<ul> <li>In the QGIS Browser panel rigth click on SpatiaLite and choose Create Database, a new window will appear. Choose a location to save the database and database name (like us_states_pop) then click on save.</li> </ul> <ul> <li>Now, let's connect to our newly created database. In the QGIS toolbar open Database &gt; DB Manager</li> </ul> <ul> <li>The Database Manager window will open. From the Providers panel expand SpatiaLite &gt; us_states_pop to connect to the database.</li> </ul>"},{"location":"tutorials/GIS/Spatial_Databases/SpatiaLite/spatialite/#insert-data-into-the-database","title":"Insert data into the database","text":"<ul> <li>From the Datebase Manager window click on the 'Import Layer File' button to insert a layer file to the database.</li> </ul> <ul> <li> <p>A new window will appear, Make sure that 'us_state_pop' layer is selected in the Input option, and click on the checkboxes next to Primary Key and Create spatial index options to activate them. </p> </li> <li> <p>The Primary Key option creates a new unique key to each record of the database, we can call the field whatever we like, but in this tutorial I will choose the default value 'id'.</p> </li> <li> <p>The Create spatial index option, is used with spatial data to imorive the queries time.</p> </li> <li> <p>Finally click Ok to load the data.</p> </li> </ul> <p></p> <p></p> <p></p> <ul> <li>A new table called us_state_pop is added to our database. Click on the Table tab to see its data.</li> </ul> <p></p> <p></p>"},{"location":"tutorials/GIS/Spatial_Databases/SpatiaLite/spatialite/#run-basic-sql-queries-on-the-database","title":"Run basic SQL queries on the database","text":"<ul> <li>In the DB Manager window, click on the SQL Window, to open the SQL Query window</li> </ul> <ul> <li>Let's write a SQL query to retrive a record about New York city</li> </ul> <p>select * from us_state_pop where Name_1 = \"New York\";</p> <ul> <li>Next, click on Execute to run the query</li> </ul> <p></p> <ul> <li>Here is the result:</li> </ul> <p></p> <ul> <li>Another example, let's say we want to retrieve the name and population of all the states that have more than 10 million population.   select Name_1, Pop from us_state_pop where Pop &gt; 10000000;</li> </ul> <p></p> <ul> <li> <p>And that's it for today's tutorial. We can see how easy it is to create, manage and query spatial databases using QGIS.</p> </li> <li> <p>In a later tutorial, we will learn how to create a PostGIS database and query it's content.</p> </li> </ul>"},{"location":"tutorials/General/general/","title":"General","text":""},{"location":"tutorials/General/general/#general","title":"General","text":"<ul> <li> <p>Installing Python</p> </li> <li> <p>Installing Anaconda Distrbution</p> </li> <li> <p>Creating Anaconda Environment and Installing ArcGIS Python API</p> </li> <li> <p>Installing Microsoft VS Code and some recommended Extensions</p> </li> </ul>"},{"location":"tutorials/General/1-Installing_Python/python/","title":"Installing Python on Windows x64:","text":""},{"location":"tutorials/General/1-Installing_Python/python/#installing-python-on-windows-x64","title":"Installing Python on Windows x64:","text":"<ul> <li>In this tutorial we will learn how to install Python 3.9 on windows x64-bit</li> </ul>"},{"location":"tutorials/General/1-Installing_Python/python/#steps","title":"Steps","text":"<ul> <li>Check if Python is installed in our machine.</li> <li>Downloading Python 3.9 executable file. </li> <li>Installing Python.</li> <li>Make sure that Python is installed correctly.</li> </ul>"},{"location":"tutorials/General/1-Installing_Python/python/#check-if-python-is-installed-in-our-machine","title":"Check if Python is installed in our machine:","text":"<ul> <li>To check if python is installed in your machine first open start menu and search for cmd to open windows command prompt.</li> </ul> <ul> <li> <p>A cmd window will open, type the following command then click Enter to check the installed version of Python.</p> <p>python --version</p> </li> </ul> <p></p> <p></p> <ul> <li> <p>you will see that Python version 3.9 is installed in my system. But, if you did not installed Python before you will see an output of </p> <p>'python' is not recognized as an internal or external command, operable program or batch file</p> </li> <li> <p>This means that either Python is not installed or is not added to windows path environment variable.</p> </li> <li> <p>To make sure that Python is really not installed in your system, open start menu again and search for something like Python Command Prompt. If there is no matching output this means that Python is not installed. you can now go to the next step.</p> </li> </ul>"},{"location":"tutorials/General/1-Installing_Python/python/#downloading-python-39-executable-file","title":"Downloading Python 3.9 executable file:","text":"<ul> <li> <p>Open your web browser (here i am using Microsoft Edge) search bar type Python 3.9 download and click enter to search.</p> </li> <li> <p>Click on the second search result 'Python Release Python 3.9.0'</p> </li> </ul> <p></p> <p></p> <ul> <li>A new window will open, Scroll down until you see the Files section and then click on 'Windows x86-64 executable installer' to download the file</li> </ul> <p></p> <p></p> <p></p> <ul> <li>Now you are ready for the next step.</li> </ul>"},{"location":"tutorials/General/1-Installing_Python/python/#installing-python","title":"Installing Python:","text":"<ul> <li>After you finish downloading the Python file go to your downloads folder and double click on the file to open it:</li> </ul> <ul> <li> <p>The Python 3.9.0 installation window will appear.</p> </li> <li> <p>Make sure that the following check boxes are checked</p> </li> <li>Install launcher for all users (recommended)</li> <li> <p>Add Python 3.9 to PATH</p> </li> <li> <p>These options will install Python for all users of the system and will add the Python files to Windows Path Environment.</p> </li> </ul> <p></p> <ul> <li>Now click on Install Now:</li> </ul> <p></p> <ul> <li>Click on Yes to allow the install when the User Account Control (UAC) window appear.</li> </ul> <p></p> <ul> <li>Now wait until the installation is finished. Then you will see a Setup was successful window appear. Now you can click on Close button.</li> </ul> <p></p>"},{"location":"tutorials/General/1-Installing_Python/python/#make-sure-that-python-is-installed-correctly","title":"Make sure that Python is installed correctly:","text":"<ul> <li> <p>Now we can check again if Python is installed correctly in our system like we did in the begaining of this tutorial.</p> </li> <li> <p>Open start menu and search for cmd and open it.</p> </li> </ul> <p></p> <p></p> <ul> <li> <p>Type the following command then click Enter to check the installed version of Python.</p> <p>python --version</p> </li> <li> <p>You will see that Python 3.9.0 is installed:</p> </li> </ul> <p></p>"},{"location":"tutorials/General/1-Installing_Python/python/#external-links-in-this-tutorial","title":"External Links in this Tutorial:","text":"<p>Python 3.9.0</p>"},{"location":"tutorials/General/2-Installing_Anaconda/anaconda/","title":"Installing Anaconda Distribution on Windows x64:","text":""},{"location":"tutorials/General/2-Installing_Anaconda/anaconda/#installing-anaconda-distribution-on-windows-x64","title":"Installing Anaconda Distribution on Windows x64:","text":"<ul> <li> <p>This is the the second tutorial in setting a Python development enviroment and tools in our system. You can check the first part by clicking here to learn how to install Python programming language on your system</p> </li> <li> <p>In this tutorial we will learn how to install Anaconda Distribution on windows x64-bit</p> </li> </ul>"},{"location":"tutorials/General/2-Installing_Anaconda/anaconda/#steps","title":"Steps","text":"<ul> <li>Download Anaconda Distribution executable file </li> <li>Install Anaconda Distribution.</li> </ul>"},{"location":"tutorials/General/2-Installing_Anaconda/anaconda/#download-anaconda-distribution-executable-file","title":"Download Anaconda Distribution executable file:","text":"<ul> <li> <p>Open your web browser (here i am using Microsoft Edge) search bar type download Anaconda and click enter to search.</p> </li> <li> <p>Click on the first search result 'Anaconda Distribution':</p> </li> </ul> <p></p> <p></p> <ul> <li>Now click on the Download button to download Anaconda for windows for Python 3.9 64-Bit:</li> </ul> <p></p> <p></p> <ul> <li>When the download if finished you will be ready for the next step:</li> </ul>"},{"location":"tutorials/General/2-Installing_Anaconda/anaconda/#install-anaconda-distribution","title":"Install Anaconda Distribution:","text":"<ul> <li>After you finish downloading the Anaconda file go to your downloads folder and double click on the file to open it:</li> </ul> <ul> <li> <p>The Anaconda3 2022.05 (64-bit) installation window will appear.</p> </li> <li> <p>Click Next to start the installation:</p> </li> </ul> <p></p> <ul> <li>Click I Agree to accept the License Agreement.</li> </ul> <p></p> <ul> <li>Keep the Just Me (recommended) radio button on and click Next</li> </ul> <p></p> <ul> <li>Choose the install location by clicking on Browse and choose a folder, or click Next to accept the default installation location:</li> </ul> <p></p> <ul> <li>Keep the both the Advanced Options Unchecked and click Install:</li> </ul> <p></p> <ul> <li>Wait for the installation to finish:</li> </ul> <p></p> <ul> <li>When the installation is completed click Next:</li> </ul> <p></p> <ul> <li>Click Next again:</li> </ul> <p></p> <ul> <li>Finally, uncheck the Anaconda Distribution Tutorial and Getting Started with Anaconda check boxes or leave them checked if you want to learn more about Anaconda and how to use it, and click Finish</li> </ul> <p></p> <ul> <li>Now we are done, In the next tutorial we will learn how to create an Anaconda Environment and install ArcGIS Python API inside it., You can find this tutorial here</li> </ul>"},{"location":"tutorials/General/2-Installing_Anaconda/anaconda/#external-links-in-this-tutorial","title":"External Links in this Tutorial:","text":"<p>Anaconda Distribution</p>"},{"location":"tutorials/General/3-Creating_Anaconda_Environment/anaconda_environment/","title":"Creating an Anconda Environment amd Installing ArcGIS Python API:","text":""},{"location":"tutorials/General/3-Creating_Anaconda_Environment/anaconda_environment/#creating-an-anconda-environment-amd-installing-arcgis-python-api","title":"Creating an Anconda Environment amd Installing ArcGIS Python API:","text":"<ul> <li> <p>This is the third tutorial in setting a Python development enviroment and tools in our system. You can find the previous parts here:</p> </li> <li> <p>Install Python 3.9.0</p> </li> <li> <p>Install Anaconda Distribution </p> </li> <li> <p>In this tutorial we will learn how to create an Anaconda virtual environment and install ArcGIS Python API inside it.</p> </li> <li> <p>In Python, you can think of virtual environments as boxes where you will install each project dependencies inside it. This is the recommended way to create Python projects.</p> </li> <li> <p>You can learn more about Python Virtual Environments in the Python Docs website.</p> </li> <li> <p>There are many tools to create Python Virtual Environments like (there are other tools but these are some of the popular ones):</p> </li> <li> <p>The built-in tool in Python called venv</p> </li> <li> <p>Pipenv</p> </li> <li> <p>virtualenvwrapper</p> </li> <li> <p>And the one we are going to use in this tutorial Conda Environments</p> </li> </ul>"},{"location":"tutorials/General/3-Creating_Anaconda_Environment/anaconda_environment/#steps","title":"Steps","text":"<ul> <li>Create Conda Environment using the GUI tool Anaconda Navigator.</li> <li>Activating the newly created conda environment using Anaconda Powershell Prompt.</li> <li>Install ArcGIS Python API using pip.</li> </ul>"},{"location":"tutorials/General/3-Creating_Anaconda_Environment/anaconda_environment/#create-conda-environment-using-the-gui-tool-anaconda-navigator","title":"Create Conda Environment using the GUI tool Anaconda Navigator:","text":"<ul> <li>First, open your start menu and search for Anaconda Navigator and open it:</li> </ul> <ul> <li>The Anaconda Navigator window will open. Click on Environments to see the available conda environments:</li> </ul> <ul> <li>At the bottom of the screen click on the Create button to add a new conda environment:</li> </ul> <ul> <li> <p>Choose a name for the environment and it will automatically choose Python Packages and Version.</p> </li> <li> <p>Click on Create, then wait for the task to complete:</p> </li> </ul> <p></p> <p></p> <ul> <li>You will see a new environment added to the list:</li> </ul> <p></p>"},{"location":"tutorials/General/3-Creating_Anaconda_Environment/anaconda_environment/#activating-the-newly-created-conda-environment-using-anaconda-powershell-prompt","title":"Activating the newly created conda environment using Anaconda Powershell Prompt:","text":"<ul> <li> <p>Now that our conda environment is created, we need to activate it.</p> </li> <li> <p>Open your start menu and search for Anaconda Powershell Prompt and open it:</p> </li> </ul> <p></p> <p></p> <p></p> <ul> <li> <p>An Anaconda Powershell window will appear.</p> </li> <li> <p>You will notice that the (base) conda environment is curruntly active. We do not want that. So type the following command and click Enter to activate the required env:</p> <p>conda activate ArcGIS_Python_API</p> </li> </ul> <p></p> <p></p> <p></p> <ul> <li>Now you will see that the (ArcGIS_Python_API) environment is active:</li> </ul> <p></p> <ul> <li>And we are ready for the final step.</li> </ul>"},{"location":"tutorials/General/3-Creating_Anaconda_Environment/anaconda_environment/#install-arcgis-python-api-using-pip","title":"Install ArcGIS Python API using pip:","text":"<ul> <li> <p>After activating the required environment all we need is to type one single command which is:</p> <p>pip install arcgis</p> </li> </ul> <p></p> <ul> <li> <p>Wait until the command finish and make sure that there are no errors appears.</p> </li> <li> <p>And that is it for our tutorial. In the next tutorial we will learn how to install Microsoft VS Code and add some of the recommended extensions to it.</p> </li> <li> <p>You can find this tutorial here</p> </li> </ul>"},{"location":"tutorials/General/3-Creating_Anaconda_Environment/anaconda_environment/#external-links-in-this-tutorial","title":"External Links in this Tutorial:","text":"<ul> <li> <p>Conda Environments</p> </li> <li> <p>ArcGIS Python API Installation</p> </li> </ul>"},{"location":"tutorials/General/4-Install_VS_Code/vs_code/","title":"Installing VS Code and some Popular Extensions:","text":""},{"location":"tutorials/General/4-Install_VS_Code/vs_code/#installing-vs-code-and-some-popular-extensions","title":"Installing VS Code and some Popular Extensions:","text":"<ul> <li> <p>This is the final tutorial in setting a Python development enviroment and tools in our system. You can find the previous parts here:</p> </li> <li> <p>Install Python 3.9.0</p> </li> <li> <p>Install Anaconda Distribution</p> </li> <li> <p>Creating Anaconda Environment and Installing ArcGIS Python API:</p> </li> <li> <p>In this tutorial we will learn how to install Microsoft VS Code and some of its recommended extensions.</p> </li> </ul>"},{"location":"tutorials/General/4-Install_VS_Code/vs_code/#steps","title":"Steps","text":"<ul> <li>Download VS Code.</li> <li>Install VS Code.</li> <li>Install recommended extensions.</li> <li>Create a Jupyter Notebook file and choose the conda environment kernel to use.</li> </ul>"},{"location":"tutorials/General/4-Install_VS_Code/vs_code/#download-vs-code","title":"Download VS Code:","text":"<ul> <li> <p>Open your web browser (here i am using Microsoft Edge) search bar type download VS Code and click enter to search.</p> </li> <li> <p>Click on the first search result 'Download Visual Studio Code - Mac, Linux, Windows':</p> </li> </ul> <p></p> <p></p> <p></p> <ul> <li>Under the Windows logo click on 64 bit button next to User Installer:</li> </ul> <p></p> <ul> <li>Wait until the download is completed.</li> </ul> <p></p> <p></p>"},{"location":"tutorials/General/4-Install_VS_Code/vs_code/#install-vs-code","title":"Install VS Code:","text":"<ul> <li>After you finish downloading the VSCode file go to your downloads folder and double click on the file to open it:</li> </ul> <ul> <li>Click on the I accept the agreement radio button then click next:</li> </ul> <ul> <li>Choose the install location by clicking on Browse and choose a folder, or click Next to accept the default installation location:</li> </ul> <ul> <li>Click Next to create a shorcut to VS Code in Start Menu Folder:</li> </ul> <ul> <li> <p>Make sure to check the Other options because these will help us later.</p> </li> <li> <p>These options adds shortcuts to VS Code in context menus (when you right-click on something like Desktop, folder or a file) and register VS Code as the default program to open supported file types (.py, .html, .ipynb, .md and others). The last option adds VS Code to windows Path (this is used for example, if you want to open a file called test.py from the CMD or terminal you can type code test.py this will open the file in VS Code)</p> </li> <li> <p>Click Next:</p> </li> </ul> <p></p> <ul> <li>Click Install:</li> </ul> <p></p> <ul> <li>Wait until the installation is finished then click Finish to open VS Code:</li> </ul> <p></p>"},{"location":"tutorials/General/4-Install_VS_Code/vs_code/#install-recommended-extensions","title":"Install Recommended Extensions:","text":"<ul> <li> <p>When you open VS Code you will see a Get Started page which will help you to setup the application like choosing a color theme, Sync to other devices and others.</p> </li> <li> <p>Do whatever you like to customize your application then close this page:</p> </li> </ul> <p></p> <ul> <li>In the left toolbar click on the last Icon to open the Extensions window:</li> </ul> <p></p> <ul> <li>From the Popular section Install Python extension, This will install tools for Python, Jupyter Notebook and others:</li> </ul> <p></p> <p></p> <ul> <li>Close the Get Started pages as we are not going to use them:</li> </ul> <p></p> <p></p> <ul> <li> <p>Install another two extensions called Live Server and Prettier as you will be using these extensions alot in the future:</p> <ul> <li> <p>Live Server extension allows you to run a local server on your computer which helps you to auto reload the web page with each change in your code (we will be using this extension in ArcGIS JavaScript API and Web Development Tutorials).</p> </li> <li> <p>Prettier is a code formatter extension which help us in organizing our code files.</p> </li> </ul> </li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p> <ul> <li>Now we are ready for the final step.</li> </ul>"},{"location":"tutorials/General/4-Install_VS_Code/vs_code/#create-a-jupyter-notebook-file-and-choose-the-conda-environment-kernel-to-use","title":"Create a Jupyter Notebook file and choose the conda environment kernel to use:","text":"<ul> <li> <p>Now we are going to create a Jupyter Notebook in VS Code.</p> </li> <li> <p>Click on the File menu from the toolbar and choose New File...</p> </li> </ul> <p></p> <p></p> <ul> <li>Click on Jupyter Notebook .ipynb support</li> </ul> <p></p> <ul> <li> <p>A new file called Untitled-1.ipynb will be created.</p> </li> <li> <p>Now, let's learn how to change between conda environments in VS Code.</p> </li> <li> <p>On the top right of the file you will see a Kernel icon called Python 3.9.9 64-bit which means that the currently used environment is the global Python Environment.</p> </li> </ul> <p></p> <ul> <li> <p>Click on the name and you will see all the available conda environments in our system.</p> </li> <li> <p>Click on ArcGIS_Python_API Conda Env to choose it:</p> </li> </ul> <p></p> <ul> <li> <p>You will notice that the kernel name is changed to ArcGIS_Python_API (Python 3.9.13) which means that we are inside the conda environment we created on the previous tutorial here</p> </li> <li> <p>And that's it. We reached the end of our tutorial sections where we learned how to download and install development tools we are going to use in our coding and analysis journey</p> </li> </ul>"},{"location":"tutorials/General/4-Install_VS_Code/vs_code/#external-links-in-this-tutorial","title":"External Links in this Tutorial:","text":"<p>Microsoft VS Code</p>"},{"location":"tutorials/General/5-Creating_Virtual_Environment/virtual_environment/","title":"test","text":""}]}